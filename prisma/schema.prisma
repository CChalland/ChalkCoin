generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], map: "providerAccountId")
  @@index([providerId], map: "providerId")
  @@index([userId], map: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  name          String?
  image         String?
  paypal        String?
  balance       Float     @default(100.00)
  walletAddress String    @unique @default(uuid()) @db.VarChar(50)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  accepter      Bet[]     @relation("accepter")
  recipient     Bet[]     @relation("recipient")
  requester     Bet[]     @relation("requester")
  winner        Bet[]     @relation("winner")
  rewards       Reward[]  @relation("rewards")

  @@map("users")
}

model Bet {
  id            Int      @id @default(autoincrement())
  amount        Float
  currency      String
  details       Json
  odds          Json?
  accepted      Boolean  @default(false)
  completed     Boolean  @default(false)
  payed         Boolean  @default(false)
  transactionId String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  requesterId   Int
  accepterId    Int?
  recipientId   Int?
  winnerId      Int?
  accepter      User?    @relation("accepter", fields: [accepterId], references: [id])
  recipient     User?    @relation("recipient", fields: [recipientId], references: [id])
  requester     User     @relation("requester", fields: [requesterId], references: [id])
  winner        User?    @relation("winner", fields: [winnerId], references: [id])
}

model Reward {
  id            Int      @id @default(autoincrement())
  amount        Float
  currency      String
  details       Json
  transactionId String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  userId        Int
  user          User     @relation("rewards", fields: [userId], references: [id])
}
