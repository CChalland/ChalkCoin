{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/bets.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Container, Row, Col, Card, Form, InputGroup } from \"react-bootstrap\";\nimport { SportContext } from \"../contexts/Sports.Context\";\nimport { getSession } from \"next-auth/client\";\nimport BetCard from \"../components/BetCard\";\nimport axios from \"axios\"; // async function fetchBetsJSON() {\n// \tconst res = await fetch(\"http://localhost:4000/api/bets\");\n// \tconst bets = await res.json();\n// \treturn bets;\n// }\n\nfunction Bets(props) {\n  const {\n    betsData,\n    currentUser\n  } = props;\n  const {\n    sportsData\n  } = useContext(SportContext);\n  const {\n    0: bets,\n    1: setBets\n  } = useState(betsData);\n  const {\n    0: search,\n    1: setSearch\n  } = useState(\"\");\n  const betsGames = betsData.map(bet => {\n    var _sport$data$events;\n\n    const sport = sportsData.find(sport => sport.display_name === bet.details.displayName);\n    const event = (_sport$data$events = sport.data.events) === null || _sport$data$events === void 0 ? void 0 : _sport$data$events.find(event => event.id === bet.details.id);\n    bet.event = event;\n    return bet;\n  }); // useEffect(() => {\n  // \tconst getData = async () => {\n  // \t\tfetchBetsJSON().then((bets) => {\n  // \t\t\tsetBets(bets);\n  // \t\t});\n  // \t};\n  // \tgetData();\n  // }, []);\n\n  console.log(search);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(Card.Header, {\n              children: /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  xs: \"auto\",\n                  className: \"\",\n                  children: \"BETS: \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 10\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  xs: 7,\n                  className: \"mx-0\",\n                  children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                    children: /*#__PURE__*/_jsxDEV(InputGroup, {\n                      children: [/*#__PURE__*/_jsxDEV(InputGroup.Prepend, {\n                        children: /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                          children: /*#__PURE__*/_jsxDEV(\"i\", {\n                            className: \"nc-icon nc-single-02\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 54,\n                            columnNumber: 15\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 53,\n                          columnNumber: 14\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 52,\n                        columnNumber: 13\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                        name: \"search\",\n                        type: \"text\",\n                        value: search,\n                        onChange: e => {\n                          setSearch(e.target.value); // if (minValue(e.target.value, 0)) {\n                          // \tsetAmountState(true);\n                          // } else {\n                          // \tsetAmountState(false);\n                          // }\n                        },\n                        placeholder: \"Search...\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 57,\n                        columnNumber: 13\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 51,\n                      columnNumber: 12\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 50,\n                    columnNumber: 11\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 49,\n                  columnNumber: 10\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(BetCard, {\n      betsData: bets,\n      currentUser: currentUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 3\n  }, this);\n}\n\nexport default Bets;\nexport async function getServerSideProps(context) {\n  const {\n    req,\n    res\n  } = context;\n  const session = await getSession({\n    req\n  });\n  let currentUser = {};\n\n  if (session) {\n    currentUser = await prisma.user.findUnique({\n      where: {\n        id: session.user.id\n      }\n    });\n    delete currentUser.password;\n    delete currentUser.paypal;\n    delete currentUser.emailVerified;\n    delete currentUser.createdAt;\n    delete currentUser.updatedAt;\n  }\n\n  let bets = await prisma.bet.findMany({\n    where: {\n      accepted: false\n    }\n  });\n  const betPromises = bets.map(async bet => {\n    bet.details = JSON.parse(bet.details);\n    bet.createdAt = JSON.stringify(bet.createdAt);\n    bet.updatedAt = JSON.stringify(bet.updatedAt);\n    return bet;\n  });\n  const betsData = await Promise.all(betPromises);\n  return {\n    props: {\n      currentUser,\n      betsData\n    }\n  };\n}","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/bets.js"],"names":["React","useContext","useEffect","useState","Container","Row","Col","Card","Form","InputGroup","SportContext","getSession","BetCard","axios","Bets","props","betsData","currentUser","sportsData","bets","setBets","search","setSearch","betsGames","map","bet","sport","find","display_name","details","displayName","event","data","events","id","console","log","e","target","value","getServerSideProps","context","req","res","session","prisma","user","findUnique","where","password","paypal","emailVerified","createdAt","updatedAt","findMany","accepted","betPromises","JSON","parse","stringify","Promise","all"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,UAA1C,QAA4D,iBAA5D;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACpB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BF,KAAlC;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAiBjB,UAAU,CAACS,YAAD,CAAjC;AACA,QAAM;AAAA,OAACS,IAAD;AAAA,OAAOC;AAAP,MAAkBjB,QAAQ,CAACa,QAAD,CAAhC;AACA,QAAM;AAAA,OAACK,MAAD;AAAA,OAASC;AAAT,MAAsBnB,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAMoB,SAAS,GAAGP,QAAQ,CAACQ,GAAT,CAAcC,GAAD,IAAS;AAAA;;AACvC,UAAMC,KAAK,GAAGR,UAAU,CAACS,IAAX,CAAiBD,KAAD,IAAWA,KAAK,CAACE,YAAN,KAAuBH,GAAG,CAACI,OAAJ,CAAYC,WAA9D,CAAd;AACA,UAAMC,KAAK,yBAAGL,KAAK,CAACM,IAAN,CAAWC,MAAd,uDAAG,mBAAmBN,IAAnB,CAAyBI,KAAD,IAAWA,KAAK,CAACG,EAAN,KAAaT,GAAG,CAACI,OAAJ,CAAYK,EAA5D,CAAd;AACAT,IAAAA,GAAG,CAACM,KAAJ,GAAYA,KAAZ;AACA,WAAON,GAAP;AACA,GALiB,CAAlB,CANoB,CAapB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAU,EAAAA,OAAO,CAACC,GAAR,CAAYf,MAAZ;AAEA,sBACC,QAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAA,4BACC,QAAC,GAAD;AAAA,6BACC,QAAC,GAAD;AAAA,+BACC,QAAC,IAAD;AAAA,iCACC,QAAC,IAAD;AAAA,mCACC,QAAC,IAAD,CAAM,MAAN;AAAA,qCACC,QAAC,GAAD;AAAA,wCACC,QAAC,GAAD;AAAK,kBAAA,EAAE,EAAE,MAAT;AAAiB,kBAAA,SAAS,EAAC,EAA3B;AAAA,4BACE;AADF;AAAA;AAAA;AAAA;AAAA,wBADD,eAIC,QAAC,GAAD;AAAK,kBAAA,EAAE,EAAE,CAAT;AAAY,kBAAA,SAAS,EAAC,MAAtB;AAAA,yCACC,QAAC,IAAD,CAAM,KAAN;AAAA,2CACC,QAAC,UAAD;AAAA,8CACC,QAAC,UAAD,CAAY,OAAZ;AAAA,+CACC,QAAC,UAAD,CAAY,IAAZ;AAAA,iDACC;AAAG,4BAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,8BADD,eAMC,QAAC,IAAD,CAAM,OAAN;AACC,wBAAA,IAAI,EAAC,QADN;AAEC,wBAAA,IAAI,EAAC,MAFN;AAGC,wBAAA,KAAK,EAAEA,MAHR;AAIC,wBAAA,QAAQ,EAAGgB,CAAD,IAAO;AAChBf,0BAAAA,SAAS,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT,CADgB,CAEhB;AACA;AACA;AACA;AACA;AACA,yBAXF;AAYC,wBAAA,WAAW,EAAC;AAZb;AAAA;AAAA;AAAA;AAAA,8BAND;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,wBAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAyCC,QAAC,OAAD;AAAS,MAAA,QAAQ,EAAEpB,IAAnB;AAAyB,MAAA,WAAW,EAAEF;AAAtC;AAAA;AAAA;AAAA;AAAA,YAzCD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AA6CA;;AAED,eAAeH,IAAf;AAEA,OAAO,eAAe0B,kBAAf,CAAkCC,OAAlC,EAA2C;AACjD,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAeF,OAArB;AACA,QAAMG,OAAO,GAAG,MAAMjC,UAAU,CAAC;AAAE+B,IAAAA;AAAF,GAAD,CAAhC;AACA,MAAIzB,WAAW,GAAG,EAAlB;;AACA,MAAI2B,OAAJ,EAAa;AACZ3B,IAAAA,WAAW,GAAG,MAAM4B,MAAM,CAACC,IAAP,CAAYC,UAAZ,CAAuB;AAC1CC,MAAAA,KAAK,EAAE;AACNd,QAAAA,EAAE,EAAEU,OAAO,CAACE,IAAR,CAAaZ;AADX;AADmC,KAAvB,CAApB;AAKA,WAAOjB,WAAW,CAACgC,QAAnB;AACA,WAAOhC,WAAW,CAACiC,MAAnB;AACA,WAAOjC,WAAW,CAACkC,aAAnB;AACA,WAAOlC,WAAW,CAACmC,SAAnB;AACA,WAAOnC,WAAW,CAACoC,SAAnB;AACA;;AAED,MAAIlC,IAAI,GAAG,MAAM0B,MAAM,CAACpB,GAAP,CAAW6B,QAAX,CAAoB;AACpCN,IAAAA,KAAK,EAAE;AACNO,MAAAA,QAAQ,EAAE;AADJ;AAD6B,GAApB,CAAjB;AAKA,QAAMC,WAAW,GAAGrC,IAAI,CAACK,GAAL,CAAS,MAAOC,GAAP,IAAe;AAC3CA,IAAAA,GAAG,CAACI,OAAJ,GAAc4B,IAAI,CAACC,KAAL,CAAWjC,GAAG,CAACI,OAAf,CAAd;AACAJ,IAAAA,GAAG,CAAC2B,SAAJ,GAAgBK,IAAI,CAACE,SAAL,CAAelC,GAAG,CAAC2B,SAAnB,CAAhB;AACA3B,IAAAA,GAAG,CAAC4B,SAAJ,GAAgBI,IAAI,CAACE,SAAL,CAAelC,GAAG,CAAC4B,SAAnB,CAAhB;AACA,WAAO5B,GAAP;AACA,GALmB,CAApB;AAMA,QAAMT,QAAQ,GAAG,MAAM4C,OAAO,CAACC,GAAR,CAAYL,WAAZ,CAAvB;AAEA,SAAO;AACNzC,IAAAA,KAAK,EAAE;AAAEE,MAAAA,WAAF;AAAeD,MAAAA;AAAf;AADD,GAAP;AAGA","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { Container, Row, Col, Card, Form, InputGroup } from \"react-bootstrap\";\nimport { SportContext } from \"../contexts/Sports.Context\";\nimport { getSession } from \"next-auth/client\";\nimport BetCard from \"../components/BetCard\";\nimport axios from \"axios\";\n\n// async function fetchBetsJSON() {\n// \tconst res = await fetch(\"http://localhost:4000/api/bets\");\n// \tconst bets = await res.json();\n// \treturn bets;\n// }\n\nfunction Bets(props) {\n\tconst { betsData, currentUser } = props;\n\tconst { sportsData } = useContext(SportContext);\n\tconst [bets, setBets] = useState(betsData);\n\tconst [search, setSearch] = useState(\"\");\n\n\tconst betsGames = betsData.map((bet) => {\n\t\tconst sport = sportsData.find((sport) => sport.display_name === bet.details.displayName);\n\t\tconst event = sport.data.events?.find((event) => event.id === bet.details.id);\n\t\tbet.event = event;\n\t\treturn bet;\n\t});\n\n\t// useEffect(() => {\n\t// \tconst getData = async () => {\n\t// \t\tfetchBetsJSON().then((bets) => {\n\t// \t\t\tsetBets(bets);\n\t// \t\t});\n\t// \t};\n\t// \tgetData();\n\t// }, []);\n\n\tconsole.log(search);\n\n\treturn (\n\t\t<Container fluid>\n\t\t\t<Row>\n\t\t\t\t<Col>\n\t\t\t\t\t<Form>\n\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Col xs={\"auto\"} className=\"\">\n\t\t\t\t\t\t\t\t\t\t{\"BETS: \"}\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t<Col xs={7} className=\"mx-0\">\n\t\t\t\t\t\t\t\t\t\t<Form.Group>\n\t\t\t\t\t\t\t\t\t\t\t<InputGroup>\n\t\t\t\t\t\t\t\t\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<InputGroup.Text>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"nc-icon nc-single-02\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</InputGroup.Text>\n\t\t\t\t\t\t\t\t\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"search\"\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={search}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSearch(e.target.value);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// if (minValue(e.target.value, 0)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \tsetAmountState(true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// } else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \tsetAmountState(false);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</Card.Header>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Form>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<BetCard betsData={bets} currentUser={currentUser} />\n\t\t</Container>\n\t);\n}\n\nexport default Bets;\n\nexport async function getServerSideProps(context) {\n\tconst { req, res } = context;\n\tconst session = await getSession({ req });\n\tlet currentUser = {};\n\tif (session) {\n\t\tcurrentUser = await prisma.user.findUnique({\n\t\t\twhere: {\n\t\t\t\tid: session.user.id,\n\t\t\t},\n\t\t});\n\t\tdelete currentUser.password;\n\t\tdelete currentUser.paypal;\n\t\tdelete currentUser.emailVerified;\n\t\tdelete currentUser.createdAt;\n\t\tdelete currentUser.updatedAt;\n\t}\n\n\tlet bets = await prisma.bet.findMany({\n\t\twhere: {\n\t\t\taccepted: false,\n\t\t},\n\t});\n\tconst betPromises = bets.map(async (bet) => {\n\t\tbet.details = JSON.parse(bet.details);\n\t\tbet.createdAt = JSON.stringify(bet.createdAt);\n\t\tbet.updatedAt = JSON.stringify(bet.updatedAt);\n\t\treturn bet;\n\t});\n\tconst betsData = await Promise.all(betPromises);\n\n\treturn {\n\t\tprops: { currentUser, betsData },\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}