{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/test.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport Select, { components } from \"react-select\";\nconst {\n  Option\n} = components;\n\nconst IconOption = props => /*#__PURE__*/_jsxDEV(Option, _objectSpread(_objectSpread({}, props), {}, {\n  children: [/*#__PURE__*/_jsxDEV(SomeIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }, this), props.data.label]\n}), void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 2\n}, this);\n\nfunction Test(props) {\n  const [singleSelect, setSingleSelect] = React.useState(\"\");\n  const options = [{\n    value: \"\",\n    label: \"Single Option\",\n    isDisabled: true\n  }, {\n    value: \"2\",\n    label: \"Foobar\"\n  }, {\n    value: \"3\",\n    label: \"Is great\"\n  }];\n  return /*#__PURE__*/_jsxDEV(Select, {\n    className: \"react-select primary\",\n    classNamePrefix: \"react-select\",\n    name: \"singleSelect\",\n    value: singleSelect,\n    onChange: value => setSingleSelect(value),\n    options: [{\n      value: \"\",\n      label: \"Single Option\",\n      isDisabled: true\n    }, {\n      value: \"2\",\n      label: \"Foobar\"\n    }, {\n      value: \"3\",\n      label: \"Is great\"\n    }],\n    placeholder: \"Search Username\",\n    components: {\n      Options: IconOption\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 3\n  }, this);\n} // import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { Container, Col, Row, Button, Modal, Carousel, Tab, Nav, Card } from \"react-bootstrap\";\n// import Select from \"react-select\";\n// import prisma from \"../contexts/prisma\";\n// function Test(props) {\n// \tconst options = [\n// \t\t\"Inside Out\",\n// \t\t\"John Wick\",\n// \t\t\"Jurassic World\",\n// \t\t\"The Lord of the Rings\",\n// \t\t\"Pacific Rim\",\n// \t\t\"Pirates of the Caribbean\",\n// \t\t\"Planet of the Apes\",\n// \t\t\"Saw\",\n// \t\t\"Sicario\",\n// \t\t\"Zombies\",\n// \t];\n// \tconst [results, setResults] = useState(options);\n// \tconst [dropdownVisible, setDropdownVisible] = useState(false);\n// \tconst [singleSelect, setSingleSelect] = React.useState(\"\");\n// \tconst filterMethod = (options, query) => {\n// \t\treturn options.filter((option) => option.toLowerCase().includes(query.toLowerCase()));\n// \t};\n// \tconst searchList = (event) => {\n// \t\tconst results = filterMethod(options, event.target.value);\n// \t\tsetResults(results);\n// \t};\n// \tconst showDropdown = () => {\n// \t\tsetDropdownVisible(true);\n// \t};\n// \tconst hideDropdown = () => {\n// \t\tsetDropdownVisible(false);\n// \t};\n// \tconsole.log(props.users);\n// \treturn (\n// \t\t<Container>\n// \t\t\t<div className=\"autocomplete\">\n// \t\t\t\t<input\n// \t\t\t\t\ttype=\"text\"\n// \t\t\t\t\tplaceholder=\"Type to search list\"\n// \t\t\t\t\tonChange={searchList}\n// \t\t\t\t\tonFocus={() => showDropdown()}\n// \t\t\t\t\tonBlur={() => hideDropdown()}\n// \t\t\t\t/>\n// \t\t\t\t{dropdownVisible && (\n// \t\t\t\t\t<div className=\"autocomplete-dropdown\">\n// \t\t\t\t\t\t<ul className=\"autocomplete-search-results-list\">\n// \t\t\t\t\t\t\t{results.map((result) => (\n// \t\t\t\t\t\t\t\t<li className=\"autocomplete-search-result\" key={result}>\n// \t\t\t\t\t\t\t\t\t{result}\n// \t\t\t\t\t\t\t\t</li>\n// \t\t\t\t\t\t\t))}\n// \t\t\t\t\t\t</ul>\n// \t\t\t\t\t</div>\n// \t\t\t\t)}\n// \t\t\t</div>\n// \t\t\t<Select\n// \t\t\t\tclassName=\"react-select primary\"\n// \t\t\t\tclassNamePrefix=\"react-select\"\n// \t\t\t\tname=\"singleSelect\"\n// \t\t\t\tvalue={singleSelect}\n// \t\t\t\tonChange={(value) => setSingleSelect(value)}\n// \t\t\t\toptions={[\n// \t\t\t\t\t{\n// \t\t\t\t\t\tvalue: \"\",\n// \t\t\t\t\t\tlabel: \"Single Option\",\n// \t\t\t\t\t\tisDisabled: true,\n// \t\t\t\t\t},\n// \t\t\t\t\t{ value: \"2\", label: \"Foobar\" },\n// \t\t\t\t\t{ value: \"3\", label: \"Is great\" },\n// \t\t\t\t]}\n// \t\t\t\tplaceholder=\"Search Username\"\n// \t\t\t/>\n// \t\t</Container>\n// \t);\n// }\n\n\nexport default Test;\nexport async function getServerSideProps(context) {\n  let users = await prisma.user.findMany();\n  users = users.map(user => {\n    delete user.emailVerified;\n    delete user.createdAt;\n    delete user.updatedAt;\n    return user;\n  });\n  return {\n    props: {\n      users\n    }\n  };\n}","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/test.js"],"names":["React","useState","Select","components","Option","IconOption","props","data","label","Test","singleSelect","setSingleSelect","options","value","isDisabled","Options","getServerSideProps","context","users","prisma","user","findMany","map","emailVerified","createdAt","updatedAt"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,cAAnC;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,UAAnB;;AACA,MAAME,UAAU,GAAIC,KAAD,iBAClB,QAAC,MAAD,kCAAYA,KAAZ;AAAA,0BACC,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,UADD,EAEEA,KAAK,CAACC,IAAN,CAAWC,KAFb;AAAA;AAAA;AAAA;AAAA;AAAA,QADD;;AAOA,SAASC,IAAT,CAAcH,KAAd,EAAqB;AACpB,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkCX,KAAK,CAACC,QAAN,CAAe,EAAf,CAAxC;AAEA,QAAMW,OAAO,GAAG,CACf;AACCC,IAAAA,KAAK,EAAE,EADR;AAECL,IAAAA,KAAK,EAAE,eAFR;AAGCM,IAAAA,UAAU,EAAE;AAHb,GADe,EAMf;AAAED,IAAAA,KAAK,EAAE,GAAT;AAAcL,IAAAA,KAAK,EAAE;AAArB,GANe,EAOf;AAAEK,IAAAA,KAAK,EAAE,GAAT;AAAcL,IAAAA,KAAK,EAAE;AAArB,GAPe,CAAhB;AAUA,sBACC,QAAC,MAAD;AACC,IAAA,SAAS,EAAC,sBADX;AAEC,IAAA,eAAe,EAAC,cAFjB;AAGC,IAAA,IAAI,EAAC,cAHN;AAIC,IAAA,KAAK,EAAEE,YAJR;AAKC,IAAA,QAAQ,EAAGG,KAAD,IAAWF,eAAe,CAACE,KAAD,CALrC;AAMC,IAAA,OAAO,EAAE,CACR;AACCA,MAAAA,KAAK,EAAE,EADR;AAECL,MAAAA,KAAK,EAAE,eAFR;AAGCM,MAAAA,UAAU,EAAE;AAHb,KADQ,EAMR;AAAED,MAAAA,KAAK,EAAE,GAAT;AAAcL,MAAAA,KAAK,EAAE;AAArB,KANQ,EAOR;AAAEK,MAAAA,KAAK,EAAE,GAAT;AAAcL,MAAAA,KAAK,EAAE;AAArB,KAPQ,CANV;AAeC,IAAA,WAAW,EAAC,iBAfb;AAgBC,IAAA,UAAU,EAAE;AAAEO,MAAAA,OAAO,EAAEV;AAAX;AAhBb;AAAA;AAAA;AAAA;AAAA,UADD;AAoBA,C,CAED;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeI,IAAf;AAEA,OAAO,eAAeO,kBAAf,CAAkCC,OAAlC,EAA2C;AACjD,MAAIC,KAAK,GAAG,MAAMC,MAAM,CAACC,IAAP,CAAYC,QAAZ,EAAlB;AACAH,EAAAA,KAAK,GAAGA,KAAK,CAACI,GAAN,CAAWF,IAAD,IAAU;AAC3B,WAAOA,IAAI,CAACG,aAAZ;AACA,WAAOH,IAAI,CAACI,SAAZ;AACA,WAAOJ,IAAI,CAACK,SAAZ;AAEA,WAAOL,IAAP;AACA,GANO,CAAR;AAQA,SAAO;AACNd,IAAAA,KAAK,EAAE;AAAEY,MAAAA;AAAF;AADD,GAAP;AAGA","sourcesContent":["import React, { useState } from \"react\";\nimport Select, { components } from \"react-select\";\n\nconst { Option } = components;\nconst IconOption = (props) => (\n\t<Option {...props}>\n\t\t<SomeIcon />\n\t\t{props.data.label}\n\t</Option>\n);\n\nfunction Test(props) {\n\tconst [singleSelect, setSingleSelect] = React.useState(\"\");\n\n\tconst options = [\n\t\t{\n\t\t\tvalue: \"\",\n\t\t\tlabel: \"Single Option\",\n\t\t\tisDisabled: true,\n\t\t},\n\t\t{ value: \"2\", label: \"Foobar\" },\n\t\t{ value: \"3\", label: \"Is great\" },\n\t];\n\n\treturn (\n\t\t<Select\n\t\t\tclassName=\"react-select primary\"\n\t\t\tclassNamePrefix=\"react-select\"\n\t\t\tname=\"singleSelect\"\n\t\t\tvalue={singleSelect}\n\t\t\tonChange={(value) => setSingleSelect(value)}\n\t\t\toptions={[\n\t\t\t\t{\n\t\t\t\t\tvalue: \"\",\n\t\t\t\t\tlabel: \"Single Option\",\n\t\t\t\t\tisDisabled: true,\n\t\t\t\t},\n\t\t\t\t{ value: \"2\", label: \"Foobar\" },\n\t\t\t\t{ value: \"3\", label: \"Is great\" },\n\t\t\t]}\n\t\t\tplaceholder=\"Search Username\"\n\t\t\tcomponents={{ Options: IconOption }}\n\t\t/>\n\t);\n}\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import { Container, Col, Row, Button, Modal, Carousel, Tab, Nav, Card } from \"react-bootstrap\";\n// import Select from \"react-select\";\n// import prisma from \"../contexts/prisma\";\n\n// function Test(props) {\n// \tconst options = [\n// \t\t\"Inside Out\",\n// \t\t\"John Wick\",\n// \t\t\"Jurassic World\",\n// \t\t\"The Lord of the Rings\",\n// \t\t\"Pacific Rim\",\n// \t\t\"Pirates of the Caribbean\",\n// \t\t\"Planet of the Apes\",\n// \t\t\"Saw\",\n// \t\t\"Sicario\",\n// \t\t\"Zombies\",\n// \t];\n\n// \tconst [results, setResults] = useState(options);\n// \tconst [dropdownVisible, setDropdownVisible] = useState(false);\n// \tconst [singleSelect, setSingleSelect] = React.useState(\"\");\n\n// \tconst filterMethod = (options, query) => {\n// \t\treturn options.filter((option) => option.toLowerCase().includes(query.toLowerCase()));\n// \t};\n\n// \tconst searchList = (event) => {\n// \t\tconst results = filterMethod(options, event.target.value);\n// \t\tsetResults(results);\n// \t};\n\n// \tconst showDropdown = () => {\n// \t\tsetDropdownVisible(true);\n// \t};\n\n// \tconst hideDropdown = () => {\n// \t\tsetDropdownVisible(false);\n// \t};\n\n// \tconsole.log(props.users);\n// \treturn (\n// \t\t<Container>\n// \t\t\t<div className=\"autocomplete\">\n// \t\t\t\t<input\n// \t\t\t\t\ttype=\"text\"\n// \t\t\t\t\tplaceholder=\"Type to search list\"\n// \t\t\t\t\tonChange={searchList}\n// \t\t\t\t\tonFocus={() => showDropdown()}\n// \t\t\t\t\tonBlur={() => hideDropdown()}\n// \t\t\t\t/>\n// \t\t\t\t{dropdownVisible && (\n// \t\t\t\t\t<div className=\"autocomplete-dropdown\">\n// \t\t\t\t\t\t<ul className=\"autocomplete-search-results-list\">\n// \t\t\t\t\t\t\t{results.map((result) => (\n// \t\t\t\t\t\t\t\t<li className=\"autocomplete-search-result\" key={result}>\n// \t\t\t\t\t\t\t\t\t{result}\n// \t\t\t\t\t\t\t\t</li>\n// \t\t\t\t\t\t\t))}\n// \t\t\t\t\t\t</ul>\n// \t\t\t\t\t</div>\n// \t\t\t\t)}\n// \t\t\t</div>\n\n// \t\t\t<Select\n// \t\t\t\tclassName=\"react-select primary\"\n// \t\t\t\tclassNamePrefix=\"react-select\"\n// \t\t\t\tname=\"singleSelect\"\n// \t\t\t\tvalue={singleSelect}\n// \t\t\t\tonChange={(value) => setSingleSelect(value)}\n// \t\t\t\toptions={[\n// \t\t\t\t\t{\n// \t\t\t\t\t\tvalue: \"\",\n// \t\t\t\t\t\tlabel: \"Single Option\",\n// \t\t\t\t\t\tisDisabled: true,\n// \t\t\t\t\t},\n// \t\t\t\t\t{ value: \"2\", label: \"Foobar\" },\n// \t\t\t\t\t{ value: \"3\", label: \"Is great\" },\n// \t\t\t\t]}\n// \t\t\t\tplaceholder=\"Search Username\"\n// \t\t\t/>\n// \t\t</Container>\n// \t);\n// }\n\nexport default Test;\n\nexport async function getServerSideProps(context) {\n\tlet users = await prisma.user.findMany();\n\tusers = users.map((user) => {\n\t\tdelete user.emailVerified;\n\t\tdelete user.createdAt;\n\t\tdelete user.updatedAt;\n\n\t\treturn user;\n\t});\n\n\treturn {\n\t\tprops: { users },\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}