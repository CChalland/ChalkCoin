{"ast":null,"code":"import prisma from \"../../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\nexport default (async (req, res) => {\n  const session = await getSession({\n    req\n  });\n\n  if (req.method === \"GET\") {\n    return res.status(405).json({\n      message: \"Method not allowed\"\n    });\n  } else if (req.method === \"POST\") {\n    const bet = req.body;\n\n    if (session) {\n      try {\n        let betData = {\n          amount: bet.amount,\n          details: JSON.stringify(bet.details),\n          currency: bet.currency,\n          requester: {\n            connect: {\n              id: session.user.id\n            }\n          }\n        };\n        if (bet.recipientId) betData.recipient = {\n          connect: {\n            id: bet.recipientId\n          }\n        };\n        const createdBet = await prisma.bet.create({\n          data: betData\n        });\n        return res.json(createdBet);\n      } catch (e) {\n        console.log(e);\n\n        if (e.code === \"P2002\") {\n          return res.json({\n            error: `There's already an account with that ${e.meta.target[0]}`\n          });\n        } // throw e;\n\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/api/createBet.js"],"names":["prisma","getSession","req","res","session","method","status","json","message","bet","body","betData","amount","details","JSON","stringify","currency","requester","connect","id","user","recipientId","recipient","createdBet","create","data","e","console","log","code","error","meta","target"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAMC,OAAO,GAAG,MAAMH,UAAU,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAAhC;;AAEA,MAAIA,GAAG,CAACG,MAAJ,KAAe,KAAnB,EAA0B;AACzB,WAAOF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACA,GAFD,MAEO,IAAIN,GAAG,CAACG,MAAJ,KAAe,MAAnB,EAA2B;AACjC,UAAMI,GAAG,GAAGP,GAAG,CAACQ,IAAhB;;AACA,QAAIN,OAAJ,EAAa;AACZ,UAAI;AACH,YAAIO,OAAO,GAAG;AACbC,UAAAA,MAAM,EAAEH,GAAG,CAACG,MADC;AAEbC,UAAAA,OAAO,EAAEC,IAAI,CAACC,SAAL,CAAeN,GAAG,CAACI,OAAnB,CAFI;AAGbG,UAAAA,QAAQ,EAAEP,GAAG,CAACO,QAHD;AAIbC,UAAAA,SAAS,EAAE;AACVC,YAAAA,OAAO,EAAE;AACRC,cAAAA,EAAE,EAAEf,OAAO,CAACgB,IAAR,CAAaD;AADT;AADC;AAJE,SAAd;AAUA,YAAIV,GAAG,CAACY,WAAR,EAAqBV,OAAO,CAACW,SAAR,GAAoB;AAAEJ,UAAAA,OAAO,EAAE;AAAEC,YAAAA,EAAE,EAAEV,GAAG,CAACY;AAAV;AAAX,SAApB;AACrB,cAAME,UAAU,GAAG,MAAMvB,MAAM,CAACS,GAAP,CAAWe,MAAX,CAAkB;AAC1CC,UAAAA,IAAI,EAAEd;AADoC,SAAlB,CAAzB;AAGA,eAAOR,GAAG,CAACI,IAAJ,CAASgB,UAAT,CAAP;AACA,OAhBD,CAgBE,OAAOG,CAAP,EAAU;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;;AACA,YAAIA,CAAC,CAACG,IAAF,KAAW,OAAf,EAAwB;AACvB,iBAAO1B,GAAG,CAACI,IAAJ,CAAS;AAAEuB,YAAAA,KAAK,EAAG,wCAAuCJ,CAAC,CAACK,IAAF,CAAOC,MAAP,CAAc,CAAd,CAAiB;AAAlE,WAAT,CAAP;AACA,SAJU,CAKX;;AACA;AACD;AACD;AACD,CAjCD","sourcesContent":["import prisma from \"../../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\n\nexport default async (req, res) => {\n\tconst session = await getSession({ req });\n\n\tif (req.method === \"GET\") {\n\t\treturn res.status(405).json({ message: \"Method not allowed\" });\n\t} else if (req.method === \"POST\") {\n\t\tconst bet = req.body;\n\t\tif (session) {\n\t\t\ttry {\n\t\t\t\tlet betData = {\n\t\t\t\t\tamount: bet.amount,\n\t\t\t\t\tdetails: JSON.stringify(bet.details),\n\t\t\t\t\tcurrency: bet.currency,\n\t\t\t\t\trequester: {\n\t\t\t\t\t\tconnect: {\n\t\t\t\t\t\t\tid: session.user.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tif (bet.recipientId) betData.recipient = { connect: { id: bet.recipientId } };\n\t\t\t\tconst createdBet = await prisma.bet.create({\n\t\t\t\t\tdata: betData,\n\t\t\t\t});\n\t\t\t\treturn res.json(createdBet);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t\tif (e.code === \"P2002\") {\n\t\t\t\t\treturn res.json({ error: `There's already an account with that ${e.meta.target[0]}` });\n\t\t\t\t}\n\t\t\t\t// throw e;\n\t\t\t}\n\t\t}\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}