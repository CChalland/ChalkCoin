{"ast":null,"code":"import prisma from \"../../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\nexport default (async (req, res) => {\n  const session = await getSession({\n    req\n  });\n\n  if (req.method === \"GET\") {\n    let bets = await prisma.bet.findMany({\n      where: {\n        accepted: false\n      }\n    }).map(bet => {\n      bet.details = JSON.parse(bet.details);\n      return bet;\n    });\n    return res.json(bets); // return res.status(405).json({ message: \"Method not allowed\" });\n  } else if (req.method === \"POST\") {\n    const bet = req.body;\n\n    if (session) {\n      try {\n        let betData = {\n          amount: parseFloat(bet.amount),\n          details: JSON.stringify(bet.details),\n          currency: bet.currency,\n          requester: {\n            connect: {\n              id: session.user.id\n            }\n          }\n        };\n        if (bet.recipientId) betData.recipient = {\n          connect: {\n            id: bet.recipientId\n          }\n        }; // const createdBet = await prisma.bet.create({\n        // \tdata: betData,\n        // });\n        // return res.json(createdBet);\n\n        return res.json(betData);\n      } catch (e) {\n        console.log(e);\n\n        if (e.code === \"P2002\") {\n          return res.json({\n            error: `There's already an account with that ${e.meta.target[0]}`\n          });\n        } // throw e;\n\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/api/bets.js"],"names":["prisma","getSession","req","res","session","method","bets","bet","findMany","where","accepted","map","details","JSON","parse","json","body","betData","amount","parseFloat","stringify","currency","requester","connect","id","user","recipientId","recipient","e","console","log","code","error","meta","target"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAMC,OAAO,GAAG,MAAMH,UAAU,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAAhC;;AAEA,MAAIA,GAAG,CAACG,MAAJ,KAAe,KAAnB,EAA0B;AACzB,QAAIC,IAAI,GAAG,MAAMN,MAAM,CAACO,GAAP,CACfC,QADe,CACN;AACTC,MAAAA,KAAK,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ;AADE,KADM,EAMfC,GANe,CAMVJ,GAAD,IAAS;AACbA,MAAAA,GAAG,CAACK,OAAJ,GAAcC,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACK,OAAf,CAAd;AACA,aAAOL,GAAP;AACA,KATe,CAAjB;AAWA,WAAOJ,GAAG,CAACY,IAAJ,CAAST,IAAT,CAAP,CAZyB,CAazB;AACA,GAdD,MAcO,IAAIJ,GAAG,CAACG,MAAJ,KAAe,MAAnB,EAA2B;AACjC,UAAME,GAAG,GAAGL,GAAG,CAACc,IAAhB;;AACA,QAAIZ,OAAJ,EAAa;AACZ,UAAI;AACH,YAAIa,OAAO,GAAG;AACbC,UAAAA,MAAM,EAAEC,UAAU,CAACZ,GAAG,CAACW,MAAL,CADL;AAEbN,UAAAA,OAAO,EAAEC,IAAI,CAACO,SAAL,CAAeb,GAAG,CAACK,OAAnB,CAFI;AAGbS,UAAAA,QAAQ,EAAEd,GAAG,CAACc,QAHD;AAIbC,UAAAA,SAAS,EAAE;AACVC,YAAAA,OAAO,EAAE;AACRC,cAAAA,EAAE,EAAEpB,OAAO,CAACqB,IAAR,CAAaD;AADT;AADC;AAJE,SAAd;AAUA,YAAIjB,GAAG,CAACmB,WAAR,EAAqBT,OAAO,CAACU,SAAR,GAAoB;AAAEJ,UAAAA,OAAO,EAAE;AAAEC,YAAAA,EAAE,EAAEjB,GAAG,CAACmB;AAAV;AAAX,SAApB,CAXlB,CAYH;AACA;AACA;AACA;;AACA,eAAOvB,GAAG,CAACY,IAAJ,CAASE,OAAT,CAAP;AACA,OAjBD,CAiBE,OAAOW,CAAP,EAAU;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;;AACA,YAAIA,CAAC,CAACG,IAAF,KAAW,OAAf,EAAwB;AACvB,iBAAO5B,GAAG,CAACY,IAAJ,CAAS;AAAEiB,YAAAA,KAAK,EAAG,wCAAuCJ,CAAC,CAACK,IAAF,CAAOC,MAAP,CAAc,CAAd,CAAiB;AAAlE,WAAT,CAAP;AACA,SAJU,CAKX;;AACA;AACD;AACD;AACD,CA9CD","sourcesContent":["import prisma from \"../../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\n\nexport default async (req, res) => {\n\tconst session = await getSession({ req });\n\n\tif (req.method === \"GET\") {\n\t\tlet bets = await prisma.bet\n\t\t\t.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\taccepted: false,\n\t\t\t\t},\n\t\t\t})\n\t\t\t.map((bet) => {\n\t\t\t\tbet.details = JSON.parse(bet.details);\n\t\t\t\treturn bet;\n\t\t\t});\n\n\t\treturn res.json(bets);\n\t\t// return res.status(405).json({ message: \"Method not allowed\" });\n\t} else if (req.method === \"POST\") {\n\t\tconst bet = req.body;\n\t\tif (session) {\n\t\t\ttry {\n\t\t\t\tlet betData = {\n\t\t\t\t\tamount: parseFloat(bet.amount),\n\t\t\t\t\tdetails: JSON.stringify(bet.details),\n\t\t\t\t\tcurrency: bet.currency,\n\t\t\t\t\trequester: {\n\t\t\t\t\t\tconnect: {\n\t\t\t\t\t\t\tid: session.user.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tif (bet.recipientId) betData.recipient = { connect: { id: bet.recipientId } };\n\t\t\t\t// const createdBet = await prisma.bet.create({\n\t\t\t\t// \tdata: betData,\n\t\t\t\t// });\n\t\t\t\t// return res.json(createdBet);\n\t\t\t\treturn res.json(betData);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t\tif (e.code === \"P2002\") {\n\t\t\t\t\treturn res.json({ error: `There's already an account with that ${e.meta.target[0]}` });\n\t\t\t\t}\n\t\t\t\t// throw e;\n\t\t\t}\n\t\t}\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}