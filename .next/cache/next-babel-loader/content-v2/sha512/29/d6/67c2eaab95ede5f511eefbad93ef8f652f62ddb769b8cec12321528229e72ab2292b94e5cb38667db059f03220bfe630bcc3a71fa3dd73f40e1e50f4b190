{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/bets.js\";\nimport React, { useContext } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { SportContext } from \"../contexts/Sports.Context\"; // import prisma from \"../contexts/prisma\";\n\nimport { getSession } from \"next-auth/client\";\nimport axios from \"axios\";\n\nfunction Bets(props) {\n  console.log(props.currentUser);\n\n  const getData = async () => {\n    let response;\n    await axios.get(\"http;//localhost:4000/api/bets\").then(res => {\n      response = res;\n      console.log.log(res);\n    });\n  };\n\n  getData();\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"BETS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 3\n  }, this);\n}\n\nexport default Bets;\nexport async function getServerSideProps(context) {\n  const {\n    req,\n    res\n  } = context;\n  const session = await getSession({\n    req\n  });\n  let currentUser = {};\n\n  if (session) {\n    currentUser = await prisma.user.findUnique({\n      where: {\n        id: session.user.id\n      }\n    });\n    delete currentUser.password;\n    delete currentUser.paypal;\n    delete currentUser.emailVerified;\n    delete currentUser.createdAt;\n    delete currentUser.updatedAt;\n  }\n\n  return {\n    props: {\n      currentUser\n    }\n  };\n}","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/bets.js"],"names":["React","useContext","Container","SportContext","getSession","axios","Bets","props","console","log","currentUser","getData","response","get","then","res","getServerSideProps","context","req","session","prisma","user","findUnique","where","id","password","paypal","emailVerified","createdAt","updatedAt"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,YAAT,QAA6B,4BAA7B,C,CACA;;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,WAAlB;;AAEA,QAAMC,OAAO,GAAG,YAAY;AAC3B,QAAIC,QAAJ;AACA,UAAMP,KAAK,CAACQ,GAAN,CAAU,gCAAV,EAA4CC,IAA5C,CAAkDC,GAAD,IAAS;AAC/DH,MAAAA,QAAQ,GAAGG,GAAX;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYA,GAAZ,CAAgBM,GAAhB;AACA,KAHK,CAAN;AAIA,GAND;;AAQAJ,EAAAA,OAAO;AACP,sBACC,QAAC,SAAD;AAAA,2BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;AAED,eAAeL,IAAf;AAEA,OAAO,eAAeU,kBAAf,CAAkCC,OAAlC,EAA2C;AACjD,QAAM;AAAEC,IAAAA,GAAF;AAAOH,IAAAA;AAAP,MAAeE,OAArB;AACA,QAAME,OAAO,GAAG,MAAMf,UAAU,CAAC;AAAEc,IAAAA;AAAF,GAAD,CAAhC;AACA,MAAIR,WAAW,GAAG,EAAlB;;AACA,MAAIS,OAAJ,EAAa;AACZT,IAAAA,WAAW,GAAG,MAAMU,MAAM,CAACC,IAAP,CAAYC,UAAZ,CAAuB;AAC1CC,MAAAA,KAAK,EAAE;AACNC,QAAAA,EAAE,EAAEL,OAAO,CAACE,IAAR,CAAaG;AADX;AADmC,KAAvB,CAApB;AAKA,WAAOd,WAAW,CAACe,QAAnB;AACA,WAAOf,WAAW,CAACgB,MAAnB;AACA,WAAOhB,WAAW,CAACiB,aAAnB;AACA,WAAOjB,WAAW,CAACkB,SAAnB;AACA,WAAOlB,WAAW,CAACmB,SAAnB;AACA;;AACD,SAAO;AACNtB,IAAAA,KAAK,EAAE;AAAEG,MAAAA;AAAF;AADD,GAAP;AAGA","sourcesContent":["import React, { useContext } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { SportContext } from \"../contexts/Sports.Context\";\n// import prisma from \"../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\nimport axios from \"axios\";\n\nfunction Bets(props) {\n\tconsole.log(props.currentUser);\n\n\tconst getData = async () => {\n\t\tlet response;\n\t\tawait axios.get(\"http;//localhost:4000/api/bets\").then((res) => {\n\t\t\tresponse = res;\n\t\t\tconsole.log.log(res);\n\t\t});\n\t};\n\n\tgetData();\n\treturn (\n\t\t<Container>\n\t\t\t<div>BETS</div>\n\t\t</Container>\n\t);\n}\n\nexport default Bets;\n\nexport async function getServerSideProps(context) {\n\tconst { req, res } = context;\n\tconst session = await getSession({ req });\n\tlet currentUser = {};\n\tif (session) {\n\t\tcurrentUser = await prisma.user.findUnique({\n\t\t\twhere: {\n\t\t\t\tid: session.user.id,\n\t\t\t},\n\t\t});\n\t\tdelete currentUser.password;\n\t\tdelete currentUser.paypal;\n\t\tdelete currentUser.emailVerified;\n\t\tdelete currentUser.createdAt;\n\t\tdelete currentUser.updatedAt;\n\t}\n\treturn {\n\t\tprops: { currentUser },\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}