{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst blockchainReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD PENDING\":\n      const notIncluded = action.bets.filter(n => !state.pendingTransactions.includes(n)).map(bet => {\n        const winner = bet.event.competitions[0].competitors[0].winner ? bet.event.competitions[0].competitors[0].team.shortDisplayName : bet.event.competitions[0].competitors[1].team.shortDisplayName;\n        return {\n          amount: bet.amount,\n          details: _objectSpread(_objectSpread({}, bet.details), {}, {\n            betId: bet.id\n          }),\n          event: bet.event,\n          recipient: bet.details.winner === winner ? bet.requester.walletAddress : bet.accepter.walletAddress,\n          sender: bet.details.winner === winner ? bet.accepter.walletAddress : bet.requester.walletAddress,\n          transactionId: bet.transactionId\n        };\n      });\n\n      if (notIncluded) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          pendingTransactions: [...state.pendingTransactions, ...notIncluded]\n        });\n      } else return state;\n\n    case \"ADD BLOCK\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chain: [...state.chain, action.block],\n        pendingTransactions: [action.mineTransaction]\n      });\n\n    case \"UPDATE SELECTED BLOCK\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedBlock: action.block\n      });\n\n    case \"INIT\":\n      return action.data;\n\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;","map":{"version":3,"sources":["/Users/colechalland/Projects/ChalkCoin/reducers/Blockchain.Reducer.js"],"names":["blockchainReducer","state","action","type","notIncluded","bets","filter","n","pendingTransactions","includes","map","bet","winner","event","competitions","competitors","team","shortDisplayName","amount","details","betId","id","recipient","requester","walletAddress","accepter","sender","transactionId","chain","block","mineTransaction","selectedBlock","data"],"mappings":";;;;;;AAAA,MAAMA,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,aAAL;AACC,YAAMC,WAAW,GAAGF,MAAM,CAACG,IAAP,CAClBC,MADkB,CACVC,CAAD,IAAO,CAACN,KAAK,CAACO,mBAAN,CAA0BC,QAA1B,CAAmCF,CAAnC,CADG,EAElBG,GAFkB,CAEbC,GAAD,IAAS;AACb,cAAMC,MAAM,GAAGD,GAAG,CAACE,KAAJ,CAAUC,YAAV,CAAuB,CAAvB,EAA0BC,WAA1B,CAAsC,CAAtC,EAAyCH,MAAzC,GACZD,GAAG,CAACE,KAAJ,CAAUC,YAAV,CAAuB,CAAvB,EAA0BC,WAA1B,CAAsC,CAAtC,EAAyCC,IAAzC,CAA8CC,gBADlC,GAEZN,GAAG,CAACE,KAAJ,CAAUC,YAAV,CAAuB,CAAvB,EAA0BC,WAA1B,CAAsC,CAAtC,EAAyCC,IAAzC,CAA8CC,gBAFjD;AAGA,eAAO;AACNC,UAAAA,MAAM,EAAEP,GAAG,CAACO,MADN;AAENC,UAAAA,OAAO,kCAAOR,GAAG,CAACQ,OAAX;AAAoBC,YAAAA,KAAK,EAAET,GAAG,CAACU;AAA/B,YAFD;AAGNR,UAAAA,KAAK,EAAEF,GAAG,CAACE,KAHL;AAINS,UAAAA,SAAS,EACRX,GAAG,CAACQ,OAAJ,CAAYP,MAAZ,KAAuBA,MAAvB,GAAgCD,GAAG,CAACY,SAAJ,CAAcC,aAA9C,GAA8Db,GAAG,CAACc,QAAJ,CAAaD,aALtE;AAMNE,UAAAA,MAAM,EAAEf,GAAG,CAACQ,OAAJ,CAAYP,MAAZ,KAAuBA,MAAvB,GAAgCD,GAAG,CAACc,QAAJ,CAAaD,aAA7C,GAA6Db,GAAG,CAACY,SAAJ,CAAcC,aAN7E;AAONG,UAAAA,aAAa,EAAEhB,GAAG,CAACgB;AAPb,SAAP;AASA,OAfkB,CAApB;;AAgBA,UAAIvB,WAAJ,EAAiB;AAChB,+CAAYH,KAAZ;AAAmBO,UAAAA,mBAAmB,EAAE,CAAC,GAAGP,KAAK,CAACO,mBAAV,EAA+B,GAAGJ,WAAlC;AAAxC;AACA,OAFD,MAEO,OAAOH,KAAP;;AAER,SAAK,WAAL;AACC,6CACIA,KADJ;AAEC2B,QAAAA,KAAK,EAAE,CAAC,GAAG3B,KAAK,CAAC2B,KAAV,EAAiB1B,MAAM,CAAC2B,KAAxB,CAFR;AAGCrB,QAAAA,mBAAmB,EAAE,CAACN,MAAM,CAAC4B,eAAR;AAHtB;;AAMD,SAAK,uBAAL;AACC,6CAAY7B,KAAZ;AAAmB8B,QAAAA,aAAa,EAAE7B,MAAM,CAAC2B;AAAzC;;AAED,SAAK,MAAL;AACC,aAAO3B,MAAM,CAAC8B,IAAd;;AAED;AACC,aAAO/B,KAAP;AApCF;AAsCA,CAvCD;;AAyCA,eAAeD,iBAAf","sourcesContent":["const blockchainReducer = (state, action) => {\n\tswitch (action.type) {\n\t\tcase \"ADD PENDING\":\n\t\t\tconst notIncluded = action.bets\n\t\t\t\t.filter((n) => !state.pendingTransactions.includes(n))\n\t\t\t\t.map((bet) => {\n\t\t\t\t\tconst winner = bet.event.competitions[0].competitors[0].winner\n\t\t\t\t\t\t? bet.event.competitions[0].competitors[0].team.shortDisplayName\n\t\t\t\t\t\t: bet.event.competitions[0].competitors[1].team.shortDisplayName;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tamount: bet.amount,\n\t\t\t\t\t\tdetails: { ...bet.details, betId: bet.id },\n\t\t\t\t\t\tevent: bet.event,\n\t\t\t\t\t\trecipient:\n\t\t\t\t\t\t\tbet.details.winner === winner ? bet.requester.walletAddress : bet.accepter.walletAddress,\n\t\t\t\t\t\tsender: bet.details.winner === winner ? bet.accepter.walletAddress : bet.requester.walletAddress,\n\t\t\t\t\t\ttransactionId: bet.transactionId,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\tif (notIncluded) {\n\t\t\t\treturn { ...state, pendingTransactions: [...state.pendingTransactions, ...notIncluded] };\n\t\t\t} else return state;\n\n\t\tcase \"ADD BLOCK\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tchain: [...state.chain, action.block],\n\t\t\t\tpendingTransactions: [action.mineTransaction],\n\t\t\t};\n\n\t\tcase \"UPDATE SELECTED BLOCK\":\n\t\t\treturn { ...state, selectedBlock: action.block };\n\n\t\tcase \"INIT\":\n\t\t\treturn action.data;\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default blockchainReducer;\n"]},"metadata":{},"sourceType":"module"}