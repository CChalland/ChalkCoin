{"ast":null,"code":"import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport Adapters from \"next-auth/adapters\";\nimport DiscordProvider from \"next-auth/providers/discord\";\nimport FacebookProvider from \"next-auth/providers/facebook\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport LinkedInProvider from \"next-auth/providers/linkedin\";\nimport prisma from \"../../../contexts/prisma\";\nimport { compareSync } from \"bcrypt\";\n\nconst authHandler = (req, res) => NextAuth(req, res, options);\n\nexport default authHandler;\nconst options = {\n  providers: [Providers.Credentials({\n    id: \"credentials\",\n    name: \"Login\",\n\n    async authorize(credentials) {\n      const user = await prisma.user.findFirst({\n        where: {\n          email: credentials.email\n        },\n        include: {\n          requester: {\n            select: {\n              id: true\n            }\n          },\n          accepter: {\n            select: {\n              id: true\n            }\n          },\n          recipient: {\n            select: {\n              id: true\n            }\n          }\n        }\n      });\n\n      if (user) {\n        const passwordTrue = await compareSync(credentials.password, user.password);\n\n        if (passwordTrue) {\n          delete user.password;\n          return user;\n        } else {\n          throw new Error(\"incorrectPassword\");\n        }\n      } else {\n        throw new Error(\"invalidEmail\");\n      }\n    }\n\n  }), Providers.Email({\n    server: {\n      host: process.env.SMTP_HOST,\n      port: Number(process.env.SMTP_PORT),\n      auth: {\n        user: process.env.SMTP_USER,\n        pass: process.env.SMTP_PASSWORD\n      }\n    },\n    from: process.env.SMTP_FROM\n  }), Providers.GitHub({\n    clientId: process.env.GITHUB_ID,\n    clientSecret: process.env.GITHUB_SECRET\n  }), DiscordProvider({\n    clientId: process.env.DISCORD_CLIENT_ID,\n    clientSecret: process.env.DISCORD_CLIENT_SECRET\n  }), GoogleProvider({\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET\n  }), LinkedInProvider({\n    clientId: process.env.LINKEDIN_CLIENT_ID,\n    clientSecret: process.env.LINKEDIN_CLIENT_SECRET\n  })],\n  session: {\n    jwt: true,\n    maxAge: 30 * 24 * 60 * 60,\n    // 30 days\n    updateAge: 24 * 60 * 60 // 24 hours\n\n  },\n  callbacks: {\n    async jwt(token, user, account, profile, isNewUser) {\n      // console.log(\"jwt token\", token);\n      // console.log(\"jwt user\", user);\n      // console.log(\"jwt account\", account);\n      // console.log(\"jwt profile\", profile);\n      // console.log(\"jwt isNewUser\", isNewUser);\n      if (account) {\n        token.accessToken = account.access_token;\n      }\n\n      if (user) {\n        if (!(\"accepter\" in user) || !(\"recipient\" in user) || !(\"requester\" in user)) {\n          const currentUser = await prisma.user.findFirst({\n            where: {\n              id: parseInt(user.id)\n            },\n            include: {\n              requester: {\n                select: {\n                  id: true\n                }\n              },\n              accepter: {\n                select: {\n                  id: true\n                }\n              },\n              recipient: {\n                select: {\n                  id: true\n                }\n              }\n            }\n          });\n          delete currentUser.password;\n          token.user = await currentUser;\n        } else {\n          token.user = user;\n        }\n      }\n\n      return token;\n    },\n\n    async session(session, token, user) {\n      // console.log(\"session session\", session);\n      // console.log(\"session user\", user);\n      // console.log(\"session token\", token);\n      session.accessToken = token.accessToken;\n      session.user = token.user;\n      return session;\n    }\n\n  },\n  pages: {\n    signIn: \"/login\",\n    error: \"/login\",\n    verifyRequest: \"/login?verifyRequest=true\",\n    newUser: \"/user?newUser=true\"\n  },\n  // @ts-ignore\n  adapter: Adapters.Prisma.Adapter({\n    prisma\n  }),\n  secret: process.env.SECRET\n};","map":{"version":3,"sources":["/Users/colechalland/Projects/ChalkCoin/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","Adapters","DiscordProvider","FacebookProvider","GoogleProvider","LinkedInProvider","prisma","compareSync","authHandler","req","res","options","providers","Credentials","id","name","authorize","credentials","user","findFirst","where","email","include","requester","select","accepter","recipient","passwordTrue","password","Error","Email","server","host","process","env","SMTP_HOST","port","Number","SMTP_PORT","auth","SMTP_USER","pass","SMTP_PASSWORD","from","SMTP_FROM","GitHub","clientId","GITHUB_ID","clientSecret","GITHUB_SECRET","DISCORD_CLIENT_ID","DISCORD_CLIENT_SECRET","GOOGLE_CLIENT_ID","GOOGLE_CLIENT_SECRET","LINKEDIN_CLIENT_ID","LINKEDIN_CLIENT_SECRET","session","jwt","maxAge","updateAge","callbacks","token","account","profile","isNewUser","accessToken","access_token","currentUser","parseInt","pages","signIn","error","verifyRequest","newUser","adapter","Prisma","Adapter","secret","SECRET"],"mappings":"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","sourcesContent":["import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport Adapters from \"next-auth/adapters\";\nimport DiscordProvider from \"next-auth/providers/discord\";\nimport FacebookProvider from \"next-auth/providers/facebook\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport LinkedInProvider from \"next-auth/providers/linkedin\";\nimport prisma from \"../../../contexts/prisma\";\nimport { compareSync } from \"bcrypt\";\n\nconst authHandler = (req, res) => NextAuth(req, res, options);\nexport default authHandler;\n\nconst options = {\n\tproviders: [\n\t\tProviders.Credentials({\n\t\t\tid: \"credentials\",\n\t\t\tname: \"Login\",\n\t\t\tasync authorize(credentials) {\n\t\t\t\tconst user = await prisma.user.findFirst({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\temail: credentials.email,\n\t\t\t\t\t},\n\t\t\t\t\tinclude: {\n\t\t\t\t\t\trequester: {\n\t\t\t\t\t\t\tselect: { id: true },\n\t\t\t\t\t\t},\n\t\t\t\t\t\taccepter: {\n\t\t\t\t\t\t\tselect: { id: true },\n\t\t\t\t\t\t},\n\t\t\t\t\t\trecipient: {\n\t\t\t\t\t\t\tselect: { id: true },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tif (user) {\n\t\t\t\t\tconst passwordTrue = await compareSync(credentials.password, user.password);\n\t\t\t\t\tif (passwordTrue) {\n\t\t\t\t\t\tdelete user.password;\n\t\t\t\t\t\treturn user;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(\"incorrectPassword\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"invalidEmail\");\n\t\t\t\t}\n\t\t\t},\n\t\t}),\n\t\tProviders.Email({\n\t\t\tserver: {\n\t\t\t\thost: process.env.SMTP_HOST,\n\t\t\t\tport: Number(process.env.SMTP_PORT),\n\t\t\t\tauth: {\n\t\t\t\t\tuser: process.env.SMTP_USER,\n\t\t\t\t\tpass: process.env.SMTP_PASSWORD,\n\t\t\t\t},\n\t\t\t},\n\t\t\tfrom: process.env.SMTP_FROM,\n\t\t}),\n\t\tProviders.GitHub({\n\t\t\tclientId: process.env.GITHUB_ID,\n\t\t\tclientSecret: process.env.GITHUB_SECRET,\n\t\t}),\n\t\tDiscordProvider({\n\t\t\tclientId: process.env.DISCORD_CLIENT_ID,\n\t\t\tclientSecret: process.env.DISCORD_CLIENT_SECRET,\n\t\t}),\n\t\tGoogleProvider({\n\t\t\tclientId: process.env.GOOGLE_CLIENT_ID,\n\t\t\tclientSecret: process.env.GOOGLE_CLIENT_SECRET,\n\t\t}),\n\t\tLinkedInProvider({\n\t\t\tclientId: process.env.LINKEDIN_CLIENT_ID,\n\t\t\tclientSecret: process.env.LINKEDIN_CLIENT_SECRET,\n\t\t}),\n\t],\n\tsession: {\n\t\tjwt: true,\n\t\tmaxAge: 30 * 24 * 60 * 60, // 30 days\n\t\tupdateAge: 24 * 60 * 60, // 24 hours\n\t},\n\tcallbacks: {\n\t\tasync jwt(token, user, account, profile, isNewUser) {\n\t\t\t// console.log(\"jwt token\", token);\n\t\t\t// console.log(\"jwt user\", user);\n\t\t\t// console.log(\"jwt account\", account);\n\t\t\t// console.log(\"jwt profile\", profile);\n\t\t\t// console.log(\"jwt isNewUser\", isNewUser);\n\t\t\tif (account) {\n\t\t\t\ttoken.accessToken = account.access_token;\n\t\t\t}\n\t\t\tif (user) {\n\t\t\t\tif (!(\"accepter\" in user) || !(\"recipient\" in user) || !(\"requester\" in user)) {\n\t\t\t\t\tconst currentUser = await prisma.user.findFirst({\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\tid: parseInt(user.id),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinclude: {\n\t\t\t\t\t\t\trequester: {\n\t\t\t\t\t\t\t\tselect: { id: true },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\taccepter: {\n\t\t\t\t\t\t\t\tselect: { id: true },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trecipient: {\n\t\t\t\t\t\t\t\tselect: { id: true },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tdelete currentUser.password;\n\t\t\t\t\ttoken.user = await currentUser;\n\t\t\t\t} else {\n\t\t\t\t\ttoken.user = user;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn token;\n\t\t},\n\t\tasync session(session, token, user) {\n\t\t\t// console.log(\"session session\", session);\n\t\t\t// console.log(\"session user\", user);\n\t\t\t// console.log(\"session token\", token);\n\t\t\tsession.accessToken = token.accessToken;\n\t\t\tsession.user = token.user;\n\n\t\t\treturn session;\n\t\t},\n\t},\n\tpages: {\n\t\tsignIn: \"/login\",\n\t\terror: \"/login\",\n\t\tverifyRequest: \"/login?verifyRequest=true\",\n\t\tnewUser: \"/user?newUser=true\",\n\t},\n\t// @ts-ignore\n\tadapter: Adapters.Prisma.Adapter({\n\t\tprisma,\n\t}),\n\n\tsecret: process.env.SECRET,\n};\n"]},"metadata":{},"sourceType":"module"}