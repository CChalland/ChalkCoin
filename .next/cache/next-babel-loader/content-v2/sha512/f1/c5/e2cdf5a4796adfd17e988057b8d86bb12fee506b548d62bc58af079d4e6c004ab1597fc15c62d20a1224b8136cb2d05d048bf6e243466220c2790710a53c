{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colechalland/Projects/ChalkCoin/contexts/Bets.Context.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext, useReducer, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport betsReducer from \"../reducers/Bets.Reducer\";\nimport { EventsFinder } from \"../helpers/EventsHelper\";\nimport { BlockchainDispatch } from \"./Blockchain.Context\";\nimport { getSession } from \"next-auth/client\";\nexport const BetContext = /*#__PURE__*/createContext();\nexport const BetDispatch = /*#__PURE__*/createContext();\nexport function BetProvider(props) {\n  const blockchainDispatch = useContext(BlockchainDispatch);\n  const {\n    0: bets,\n    1: dispatch\n  } = useReducer(betsReducer, {\n    pendingBets: {\n      openBets: [],\n      recipientBets: []\n    },\n    acceptedBets: [],\n    completedBets: [],\n    initialized: false,\n    userBets: {}\n  });\n  const completedAcceptedBets = bets.acceptedBets.map(sport => {\n    var _sport$bets;\n\n    return (_sport$bets = sport.bets) === null || _sport$bets === void 0 ? void 0 : _sport$bets.filter(bet => {\n      var _bet$event;\n\n      return ((_bet$event = bet.event) === null || _bet$event === void 0 ? void 0 : _bet$event.status.type.name) === \"STATUS_FINAL\";\n    });\n  }).flat();\n  const completedOpenBets = bets.pendingBets.openBets.map(sport => {\n    var _sport$bets2;\n\n    return (_sport$bets2 = sport.bets) === null || _sport$bets2 === void 0 ? void 0 : _sport$bets2.filter(bet => {\n      var _bet$event2;\n\n      return ((_bet$event2 = bet.event) === null || _bet$event2 === void 0 ? void 0 : _bet$event2.status.type.name) === \"STATUS_FINAL\";\n    });\n  }).flat();\n  const completedRecipientBets = bets.pendingBets.recipientBets.map(sport => {\n    var _sport$bets3;\n\n    return (_sport$bets3 = sport.bets) === null || _sport$bets3 === void 0 ? void 0 : _sport$bets3.filter(bet => {\n      var _bet$event3;\n\n      return ((_bet$event3 = bet.event) === null || _bet$event3 === void 0 ? void 0 : _bet$event3.status.type.name) === \"STATUS_FINAL\";\n    });\n  }).flat();\n  useEffect(() => {\n    async function betEventFinder() {\n      let betsData, userBets;\n      let session = await getSession();\n\n      try {\n        if (session) {\n          const userRes = await axios.get(`/api/bets?type=currentUser`);\n          userBets = userRes.data;\n          userBets.pendingBets.openBets = await Promise.all(userBets.pendingBets.openBets.map(async league => {\n            return await EventsFinder(league, \"league\");\n          }));\n          userBets.pendingBets.recipientBets = await Promise.all(userBets.pendingBets.recipientBets.map(async league => {\n            return await EventsFinder(league, \"league\");\n          }));\n          userBets.acceptedBets = await Promise.all(userBets.acceptedBets.map(async league => {\n            return await EventsFinder(league, \"league\");\n          }));\n          userBets.completedBets = await Promise.all(userBets.completedBets.map(async league => {\n            return await EventsFinder(league, \"league\");\n          }));\n        }\n\n        const res = await axios.get(`/api/bets?type=all`);\n        betsData = res.data;\n        betsData.pendingBets.openBets = await Promise.all(betsData.pendingBets.openBets.map(async league => {\n          return await EventsFinder(league, \"league\");\n        }));\n        betsData.pendingBets.recipientBets = await Promise.all(betsData.pendingBets.recipientBets.map(async league => {\n          return await EventsFinder(league, \"league\");\n        }));\n        betsData.acceptedBets = await Promise.all(betsData.acceptedBets.map(async league => {\n          return await EventsFinder(league, \"league\");\n        }));\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      dispatch({\n        type: \"INIT\",\n        bets: betsData,\n        userBets,\n        initialized: true\n      });\n    }\n\n    betEventFinder();\n  }, []);\n  useEffect(() => {\n    async function handlingOpenGames() {\n      let betsData;\n\n      try {\n        const res = await axios.post(`/api/completedBets?type=open`, completedOpenBets);\n        console.log(\"completedOpenBets\", res);\n        betsData = res.data.map(bet => {\n          const event = completedOpenBets.find(acptBet => acptBet.event.id === bet.details.gameId);\n          return _objectSpread(_objectSpread({}, bet), {}, {\n            event: event.event\n          });\n        });\n        dispatch({\n          type: \"COMPLETED OPEN BET\",\n          bets: betsData\n        });\n      } catch (err) {\n        console.log(err.message);\n      }\n    }\n\n    if (completedOpenBets.length > 0) handlingOpenGames();\n  }, [completedOpenBets]);\n  useEffect(() => {\n    async function handlingRecipientGames() {\n      let betsData;\n\n      try {\n        const res = await axios.post(`/api/completedBets?type=recipient`, completedRecipientBets);\n        console.log(\"completedRecipientBets\", res);\n        betsData = res.data.map(bet => {\n          const event = completedRecipientBets.find(acptBet => acptBet.event.id === bet.details.gameId);\n          return _objectSpread(_objectSpread({}, bet), {}, {\n            event: event.event\n          });\n        });\n        dispatch({\n          type: \"COMPLETED RECIPIENT BET\",\n          bets: betsData\n        });\n      } catch (err) {\n        console.log(err.message);\n      }\n    }\n\n    if (completedRecipientBets.length > 0) handlingRecipientGames();\n  }, [completedRecipientBets]);\n  useEffect(() => {\n    async function handlingAcceptedGames() {\n      let betsData;\n\n      try {\n        const res = await axios.post(`/api/completedBets?type=accepted`, completedAcceptedBets);\n        console.log(\"completedAcceptedBets\", res);\n        betsData = res.data.map(bet => {\n          const event = completedAcceptedBets.find(acptBet => acptBet.event.id === bet.details.gameId);\n          return _objectSpread(_objectSpread({}, bet), {}, {\n            event: event.event\n          });\n        });\n        dispatch({\n          type: \"COMPLETED ACCEPTED BET\",\n          bets: betsData\n        });\n        blockchainDispatch({\n          type: \"ADD PENDING\",\n          bets: betsData\n        });\n      } catch (err) {\n        console.log(err.message);\n      }\n    }\n\n    if (completedAcceptedBets.length > 0) handlingAcceptedGames();\n  }, [completedAcceptedBets]); // useEffect(() => {\n  // \tif (bets.initialized) dispatch({ type: \"GAME UPDATE\", games: sportsData });\n  // }, [sportsData]);\n  // console.log(\"in Bets.Context\", bets);\n  // console.log(\"completedAcceptedBets\", completedAcceptedBets);\n  // console.log(\"completedOpenBets\", completedOpenBets);\n  // console.log(\"completedRecipientBets\", completedRecipientBets);\n\n  return /*#__PURE__*/_jsxDEV(BetContext.Provider, {\n    value: bets,\n    children: /*#__PURE__*/_jsxDEV(BetDispatch.Provider, {\n      value: dispatch,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 3\n  }, this);\n}","map":{"version":3,"sources":["/Users/colechalland/Projects/ChalkCoin/contexts/Bets.Context.js"],"names":["createContext","useReducer","useEffect","useContext","axios","betsReducer","EventsFinder","BlockchainDispatch","getSession","BetContext","BetDispatch","BetProvider","props","blockchainDispatch","bets","dispatch","pendingBets","openBets","recipientBets","acceptedBets","completedBets","initialized","userBets","completedAcceptedBets","map","sport","filter","bet","event","status","type","name","flat","completedOpenBets","completedRecipientBets","betEventFinder","betsData","session","userRes","get","data","Promise","all","league","res","err","console","log","message","handlingOpenGames","post","find","acptBet","id","details","gameId","length","handlingRecipientGames","handlingAcceptedGames","children"],"mappings":"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","sourcesContent":["import { createContext, useReducer, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport betsReducer from \"../reducers/Bets.Reducer\";\nimport { EventsFinder } from \"../helpers/EventsHelper\";\nimport { BlockchainDispatch } from \"./Blockchain.Context\";\nimport { getSession } from \"next-auth/client\";\n\nexport const BetContext = createContext();\nexport const BetDispatch = createContext();\nexport function BetProvider(props) {\n\tconst blockchainDispatch = useContext(BlockchainDispatch);\n\tconst [bets, dispatch] = useReducer(betsReducer, {\n\t\tpendingBets: { openBets: [], recipientBets: [] },\n\t\tacceptedBets: [],\n\t\tcompletedBets: [],\n\t\tinitialized: false,\n\t\tuserBets: {},\n\t});\n\tconst completedAcceptedBets = bets.acceptedBets\n\t\t.map((sport) => {\n\t\t\treturn sport.bets?.filter((bet) => {\n\t\t\t\treturn bet.event?.status.type.name === \"STATUS_FINAL\";\n\t\t\t});\n\t\t})\n\t\t.flat();\n\tconst completedOpenBets = bets.pendingBets.openBets\n\t\t.map((sport) => {\n\t\t\treturn sport.bets?.filter((bet) => {\n\t\t\t\treturn bet.event?.status.type.name === \"STATUS_FINAL\";\n\t\t\t});\n\t\t})\n\t\t.flat();\n\tconst completedRecipientBets = bets.pendingBets.recipientBets\n\t\t.map((sport) => {\n\t\t\treturn sport.bets?.filter((bet) => {\n\t\t\t\treturn bet.event?.status.type.name === \"STATUS_FINAL\";\n\t\t\t});\n\t\t})\n\t\t.flat();\n\n\tuseEffect(() => {\n\t\tasync function betEventFinder() {\n\t\t\tlet betsData, userBets;\n\t\t\tlet session = await getSession();\n\t\t\ttry {\n\t\t\t\tif (session) {\n\t\t\t\t\tconst userRes = await axios.get(`/api/bets?type=currentUser`);\n\t\t\t\t\tuserBets = userRes.data;\n\t\t\t\t\tuserBets.pendingBets.openBets = await Promise.all(\n\t\t\t\t\t\tuserBets.pendingBets.openBets.map(async (league) => {\n\t\t\t\t\t\t\treturn await EventsFinder(league, \"league\");\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tuserBets.pendingBets.recipientBets = await Promise.all(\n\t\t\t\t\t\tuserBets.pendingBets.recipientBets.map(async (league) => {\n\t\t\t\t\t\t\treturn await EventsFinder(league, \"league\");\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tuserBets.acceptedBets = await Promise.all(\n\t\t\t\t\t\tuserBets.acceptedBets.map(async (league) => {\n\t\t\t\t\t\t\treturn await EventsFinder(league, \"league\");\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tuserBets.completedBets = await Promise.all(\n\t\t\t\t\t\tuserBets.completedBets.map(async (league) => {\n\t\t\t\t\t\t\treturn await EventsFinder(league, \"league\");\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst res = await axios.get(`/api/bets?type=all`);\n\t\t\t\tbetsData = res.data;\n\t\t\t\tbetsData.pendingBets.openBets = await Promise.all(\n\t\t\t\t\tbetsData.pendingBets.openBets.map(async (league) => {\n\t\t\t\t\t\treturn await EventsFinder(league, \"league\");\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tbetsData.pendingBets.recipientBets = await Promise.all(\n\t\t\t\t\tbetsData.pendingBets.recipientBets.map(async (league) => {\n\t\t\t\t\t\treturn await EventsFinder(league, \"league\");\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tbetsData.acceptedBets = await Promise.all(\n\t\t\t\t\tbetsData.acceptedBets.map(async (league) => {\n\t\t\t\t\t\treturn await EventsFinder(league, \"league\");\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err.message);\n\t\t\t}\n\t\t\tdispatch({ type: \"INIT\", bets: betsData, userBets, initialized: true });\n\t\t}\n\t\tbetEventFinder();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tasync function handlingOpenGames() {\n\t\t\tlet betsData;\n\t\t\ttry {\n\t\t\t\tconst res = await axios.post(`/api/completedBets?type=open`, completedOpenBets);\n\t\t\t\tconsole.log(\"completedOpenBets\", res);\n\t\t\t\tbetsData = res.data.map((bet) => {\n\t\t\t\t\tconst event = completedOpenBets.find((acptBet) => acptBet.event.id === bet.details.gameId);\n\t\t\t\t\treturn { ...bet, event: event.event };\n\t\t\t\t});\n\t\t\t\tdispatch({ type: \"COMPLETED OPEN BET\", bets: betsData });\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err.message);\n\t\t\t}\n\t\t}\n\t\tif (completedOpenBets.length > 0) handlingOpenGames();\n\t}, [completedOpenBets]);\n\n\tuseEffect(() => {\n\t\tasync function handlingRecipientGames() {\n\t\t\tlet betsData;\n\t\t\ttry {\n\t\t\t\tconst res = await axios.post(`/api/completedBets?type=recipient`, completedRecipientBets);\n\t\t\t\tconsole.log(\"completedRecipientBets\", res);\n\t\t\t\tbetsData = res.data.map((bet) => {\n\t\t\t\t\tconst event = completedRecipientBets.find((acptBet) => acptBet.event.id === bet.details.gameId);\n\t\t\t\t\treturn { ...bet, event: event.event };\n\t\t\t\t});\n\t\t\t\tdispatch({ type: \"COMPLETED RECIPIENT BET\", bets: betsData });\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err.message);\n\t\t\t}\n\t\t}\n\t\tif (completedRecipientBets.length > 0) handlingRecipientGames();\n\t}, [completedRecipientBets]);\n\n\tuseEffect(() => {\n\t\tasync function handlingAcceptedGames() {\n\t\t\tlet betsData;\n\t\t\ttry {\n\t\t\t\tconst res = await axios.post(`/api/completedBets?type=accepted`, completedAcceptedBets);\n\t\t\t\tconsole.log(\"completedAcceptedBets\", res);\n\t\t\t\tbetsData = res.data.map((bet) => {\n\t\t\t\t\tconst event = completedAcceptedBets.find((acptBet) => acptBet.event.id === bet.details.gameId);\n\t\t\t\t\treturn { ...bet, event: event.event };\n\t\t\t\t});\n\t\t\t\tdispatch({ type: \"COMPLETED ACCEPTED BET\", bets: betsData });\n\t\t\t\tblockchainDispatch({ type: \"ADD PENDING\", bets: betsData });\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err.message);\n\t\t\t}\n\t\t}\n\t\tif (completedAcceptedBets.length > 0) handlingAcceptedGames();\n\t}, [completedAcceptedBets]);\n\n\t// useEffect(() => {\n\t// \tif (bets.initialized) dispatch({ type: \"GAME UPDATE\", games: sportsData });\n\t// }, [sportsData]);\n\n\t// console.log(\"in Bets.Context\", bets);\n\t// console.log(\"completedAcceptedBets\", completedAcceptedBets);\n\t// console.log(\"completedOpenBets\", completedOpenBets);\n\t// console.log(\"completedRecipientBets\", completedRecipientBets);\n\n\treturn (\n\t\t<BetContext.Provider value={bets}>\n\t\t\t<BetDispatch.Provider value={dispatch}>{props.children}</BetDispatch.Provider>\n\t\t</BetContext.Provider>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}