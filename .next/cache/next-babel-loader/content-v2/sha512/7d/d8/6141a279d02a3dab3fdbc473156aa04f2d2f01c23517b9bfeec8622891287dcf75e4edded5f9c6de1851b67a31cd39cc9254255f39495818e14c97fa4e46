{"ast":null,"code":"import prisma from \"../../contexts/prisma\";\nimport axios from \"axios\";\nexport default (async (req, res) => {\n  if (req.method === \"POST\") {\n    let bets = req.body;\n\n    if (req.query.type === \"accepted\") {\n      try {\n        bets = await Promise.all(bets.map(async bet => {\n          const winnerTeam = bet.event.competitions[0].competitors[0].winner ? bet.event.competitions[0].competitors[0].team.shortDisplayName : bet.event.competitions[0].competitors[1].team.shortDisplayName;\n          const winnerUser = bet.details.winner === winnerTeam ? await prisma.user.update({\n            where: {\n              id: bet.requesterId\n            },\n            data: {\n              balance: {\n                increment: parseFloat(bet.amount)\n              }\n            },\n            select: {\n              id: true,\n              balance: true,\n              walletAddress: true\n            }\n          }) : await await prisma.user.update({\n            where: {\n              id: bet.accepterId\n            },\n            data: {\n              balance: {\n                increment: parseFloat(bet.amount)\n              }\n            },\n            select: {\n              id: true,\n              balance: true,\n              walletAddress: true\n            }\n          });\n          const loserUser = bet.details.winner === winnerTeam ? await await prisma.user.findUnique({\n            where: {\n              id: bet.accepterId\n            },\n            select: {\n              id: true,\n              balance: true,\n              walletAddress: true\n            }\n          }) : await prisma.user.findUnique({\n            where: {\n              id: bet.requesterId\n            },\n            select: {\n              id: true,\n              balance: true,\n              walletAddress: true\n            }\n          });\n          const transactionBody = {\n            amount: bet.amount,\n            sender: loserUser.walletAddress,\n            recipient: winnerUser.walletAddress,\n            details: {\n              sport: bet.details.sport,\n              betId: bet.id,\n              gameId: bet.details.gameId,\n              date: bet.details.date,\n              name: bet.details.name,\n              winner: winnerTeam\n            }\n          };\n          const res = await axios.post(`${process.env.BLOCKCHAIN_URL}/transaction/broadcast`, transactionBody);\n\n          if (res.data.transactionData) {\n            return await prisma.bet.update({\n              where: {\n                id: bet.id\n              },\n              data: {\n                completed: true,\n                transactionId: res.data.transactionData.transactionId,\n                winner: {\n                  connect: {\n                    id: winnerUser.id\n                  }\n                }\n              },\n              include: {\n                accepter: {\n                  select: {\n                    walletAddress: true\n                  }\n                },\n                requester: {\n                  select: {\n                    walletAddress: true\n                  }\n                }\n              }\n            });\n          } else {\n            return await prisma.bet.findUnique({\n              where: {\n                id: bet.id\n              },\n              include: {\n                accepter: {\n                  select: {\n                    walletAddress: true\n                  }\n                },\n                requester: {\n                  select: {\n                    walletAddress: true\n                  }\n                }\n              }\n            });\n          }\n        }));\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      res.json(bets);\n    } else if (req.query.type === \"open\") {\n      try {\n        bets = await Promise.all(bets.map(async bet => {\n          return await prisma.bet.update({\n            where: {\n              id: bet.id\n            },\n            data: {\n              completed: true\n            }\n          });\n        }));\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      res.json(bets);\n    } else if (req.query.type === \"recipient\") {\n      try {\n        bets = await Promise.all(bets.map(async bet => {\n          return await prisma.bet.update({\n            where: {\n              id: bet.id\n            },\n            data: {\n              completed: true\n            }\n          });\n        }));\n      } catch (err) {\n        console.log(err.message);\n      }\n\n      res.json(bets);\n    } else {\n      res.json({\n        bets,\n        message: \"not a type listed\"\n      });\n    }\n  } else {\n    return res.status(405).json({\n      message: \"Method not allowed\"\n    });\n  }\n});","map":{"version":3,"sources":["/Users/colechalland/Projects/ChalkCoin/pages/api/completedBets.js"],"names":["prisma","axios","req","res","method","bets","body","query","type","Promise","all","map","bet","winnerTeam","event","competitions","competitors","winner","team","shortDisplayName","winnerUser","details","user","update","where","id","requesterId","data","balance","increment","parseFloat","amount","select","walletAddress","accepterId","loserUser","findUnique","transactionBody","sender","recipient","sport","betId","gameId","date","name","post","process","env","BLOCKCHAIN_URL","transactionData","completed","transactionId","connect","include","accepter","requester","err","console","log","message","json","status"],"mappings":"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","sourcesContent":["import prisma from \"../../contexts/prisma\";\nimport axios from \"axios\";\n\nexport default async (req, res) => {\n\tif (req.method === \"POST\") {\n\t\tlet bets = req.body;\n\t\tif (req.query.type === \"accepted\") {\n\t\t\ttry {\n\t\t\t\tbets = await Promise.all(\n\t\t\t\t\tbets.map(async (bet) => {\n\t\t\t\t\t\tconst winnerTeam = bet.event.competitions[0].competitors[0].winner\n\t\t\t\t\t\t\t? bet.event.competitions[0].competitors[0].team.shortDisplayName\n\t\t\t\t\t\t\t: bet.event.competitions[0].competitors[1].team.shortDisplayName;\n\t\t\t\t\t\tconst winnerUser =\n\t\t\t\t\t\t\tbet.details.winner === winnerTeam\n\t\t\t\t\t\t\t\t? await prisma.user.update({\n\t\t\t\t\t\t\t\t\t\twhere: { id: bet.requesterId },\n\t\t\t\t\t\t\t\t\t\tdata: { balance: { increment: parseFloat(bet.amount) } },\n\t\t\t\t\t\t\t\t\t\tselect: { id: true, balance: true, walletAddress: true },\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t: await await prisma.user.update({\n\t\t\t\t\t\t\t\t\t\twhere: { id: bet.accepterId },\n\t\t\t\t\t\t\t\t\t\tdata: { balance: { increment: parseFloat(bet.amount) } },\n\t\t\t\t\t\t\t\t\t\tselect: { id: true, balance: true, walletAddress: true },\n\t\t\t\t\t\t\t\t  });\n\t\t\t\t\t\tconst loserUser =\n\t\t\t\t\t\t\tbet.details.winner === winnerTeam\n\t\t\t\t\t\t\t\t? await await prisma.user.findUnique({\n\t\t\t\t\t\t\t\t\t\twhere: { id: bet.accepterId },\n\t\t\t\t\t\t\t\t\t\tselect: { id: true, balance: true, walletAddress: true },\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t: await prisma.user.findUnique({\n\t\t\t\t\t\t\t\t\t\twhere: { id: bet.requesterId },\n\t\t\t\t\t\t\t\t\t\tselect: { id: true, balance: true, walletAddress: true },\n\t\t\t\t\t\t\t\t  });\n\t\t\t\t\t\tconst transactionBody = {\n\t\t\t\t\t\t\tamount: bet.amount,\n\t\t\t\t\t\t\tsender: loserUser.walletAddress,\n\t\t\t\t\t\t\trecipient: winnerUser.walletAddress,\n\t\t\t\t\t\t\tdetails: {\n\t\t\t\t\t\t\t\tsport: bet.details.sport,\n\t\t\t\t\t\t\t\tbetId: bet.id,\n\t\t\t\t\t\t\t\tgameId: bet.details.gameId,\n\t\t\t\t\t\t\t\tdate: bet.details.date,\n\t\t\t\t\t\t\t\tname: bet.details.name,\n\t\t\t\t\t\t\t\twinner: winnerTeam,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst res = await axios.post(\n\t\t\t\t\t\t\t`${process.env.BLOCKCHAIN_URL}/transaction/broadcast`,\n\t\t\t\t\t\t\ttransactionBody\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (res.data.transactionData) {\n\t\t\t\t\t\t\treturn await prisma.bet.update({\n\t\t\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\t\t\tid: bet.id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\tcompleted: true,\n\t\t\t\t\t\t\t\t\ttransactionId: res.data.transactionData.transactionId,\n\t\t\t\t\t\t\t\t\twinner: {\n\t\t\t\t\t\t\t\t\t\tconnect: {\n\t\t\t\t\t\t\t\t\t\t\tid: winnerUser.id,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tinclude: {\n\t\t\t\t\t\t\t\t\taccepter: {\n\t\t\t\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\t\t\t\twalletAddress: true,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\trequester: {\n\t\t\t\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\t\t\t\twalletAddress: true,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn await prisma.bet.findUnique({\n\t\t\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\t\t\tid: bet.id,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tinclude: {\n\t\t\t\t\t\t\t\t\taccepter: {\n\t\t\t\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\t\t\t\twalletAddress: true,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\trequester: {\n\t\t\t\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\t\t\t\twalletAddress: true,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err.message);\n\t\t\t}\n\t\t\tres.json(bets);\n\t\t} else if (req.query.type === \"open\") {\n\t\t\ttry {\n\t\t\t\tbets = await Promise.all(\n\t\t\t\t\tbets.map(async (bet) => {\n\t\t\t\t\t\treturn await prisma.bet.update({\n\t\t\t\t\t\t\twhere: { id: bet.id },\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tcompleted: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err.message);\n\t\t\t}\n\t\t\tres.json(bets);\n\t\t} else if (req.query.type === \"recipient\") {\n\t\t\ttry {\n\t\t\t\tbets = await Promise.all(\n\t\t\t\t\tbets.map(async (bet) => {\n\t\t\t\t\t\treturn await prisma.bet.update({\n\t\t\t\t\t\t\twhere: { id: bet.id },\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tcompleted: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err.message);\n\t\t\t}\n\t\t\tres.json(bets);\n\t\t} else {\n\t\t\tres.json({ bets, message: \"not a type listed\" });\n\t\t}\n\t} else {\n\t\treturn res.status(405).json({ message: \"Method not allowed\" });\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}