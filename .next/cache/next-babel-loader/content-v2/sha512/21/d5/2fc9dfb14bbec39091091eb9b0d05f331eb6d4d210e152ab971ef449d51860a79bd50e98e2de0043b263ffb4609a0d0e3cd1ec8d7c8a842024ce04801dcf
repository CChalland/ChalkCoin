{"ast":null,"code":"import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport Adapters from \"next-auth/adapters\";\nimport prisma from \"../../../contexts/prisma\";\nimport { compareSync } from \"bcrypt\";\n\nconst authHandler = (req, res) => NextAuth(req, res, options);\n\nexport default authHandler;\nconst options = {\n  providers: [Providers.Credentials({\n    id: \"credentials\",\n    name: \"Login\",\n\n    async authorize(credentials) {\n      console.log(credentials);\n      const user = await prisma.user.findFirst({\n        where: {\n          email: credentials.loginEmail\n        }\n      });\n      console.log(\"the user\", user);\n      passwordTrue = await compareSync(credentials.loginPassword, user.password);\n      console.log(\"password True\", passwordTrue);\n\n      if (user !== null) {\n        userAccount = user;\n        return user;\n      } else {\n        return null;\n      }\n    }\n\n  }), Providers.Email({\n    server: {\n      host: process.env.SMTP_HOST,\n      port: Number(process.env.SMTP_PORT),\n      auth: {\n        user: process.env.SMTP_USER,\n        pass: process.env.SMTP_PASSWORD\n      }\n    },\n    from: process.env.SMTP_FROM\n  }), Providers.GitHub({\n    clientId: process.env.GITHUB_ID,\n    clientSecret: process.env.GITHUB_SECRET\n  })],\n  session: {\n    // Use JSON Web Tokens for session instead of database sessions.\n    // This option can be used with or without a database for users/accounts.\n    // Note: `jwt` is automatically set to `true` if no database is specified.\n    jwt: true,\n    // Seconds - How long until an idle session expires and is no longer valid.\n    maxAge: 30 * 24 * 60 * 60,\n    // 30 days\n    // Seconds - Throttle how frequently to write to database to extend a session.\n    // Use it to limit write operations. Set to 0 to always update the database.\n    // Note: This option is ignored if using JSON Web Tokens\n    updateAge: 24 * 60 * 60 // 24 hours\n\n  },\n  callbacks: {\n    async jwt(token, user) {\n      if (user) {\n        console.log(\"jwt\", user);\n        token.accessToken = user.token;\n      }\n\n      return token;\n    },\n\n    async session(session, token) {\n      delete token.password;\n      session.user = token;\n      return await session;\n    }\n\n  },\n  pages: {\n    signIn: \"/LoginRegister\",\n    verifyRequest: \"/VerifyRequest\",\n    newUser: \"/NewUser\"\n  },\n  // @ts-ignore\n  adapter: Adapters.Prisma.Adapter({\n    prisma\n  }),\n  secret: process.env.SECRET\n};","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","Adapters","prisma","compareSync","authHandler","req","res","options","providers","Credentials","id","name","authorize","credentials","console","log","user","findFirst","where","email","loginEmail","passwordTrue","loginPassword","password","userAccount","Email","server","host","process","env","SMTP_HOST","port","Number","SMTP_PORT","auth","SMTP_USER","pass","SMTP_PASSWORD","from","SMTP_FROM","GitHub","clientId","GITHUB_ID","clientSecret","GITHUB_SECRET","session","jwt","maxAge","updateAge","callbacks","token","accessToken","pages","signIn","verifyRequest","newUser","adapter","Prisma","Adapter","secret","SECRET"],"mappings":"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","sourcesContent":["import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport Adapters from \"next-auth/adapters\";\nimport prisma from \"../../../contexts/prisma\";\nimport { compareSync } from \"bcrypt\";\n\nconst authHandler = (req, res) => NextAuth(req, res, options);\nexport default authHandler;\n\nconst options = {\n\tproviders: [\n\t\tProviders.Credentials({\n\t\t\tid: \"credentials\",\n\t\t\tname: \"Login\",\n\t\t\tasync authorize(credentials) {\n\t\t\t\tconsole.log(credentials);\n\t\t\t\tconst user = await prisma.user.findFirst({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\temail: credentials.loginEmail,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tconsole.log(\"the user\", user);\n\t\t\t\tpasswordTrue = await compareSync(credentials.loginPassword, user.password);\n\t\t\t\tconsole.log(\"password True\", passwordTrue);\n\t\t\t\tif (user !== null) {\n\t\t\t\t\tuserAccount = user;\n\t\t\t\t\treturn user;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\t\t}),\n\t\tProviders.Email({\n\t\t\tserver: {\n\t\t\t\thost: process.env.SMTP_HOST,\n\t\t\t\tport: Number(process.env.SMTP_PORT),\n\t\t\t\tauth: {\n\t\t\t\t\tuser: process.env.SMTP_USER,\n\t\t\t\t\tpass: process.env.SMTP_PASSWORD,\n\t\t\t\t},\n\t\t\t},\n\t\t\tfrom: process.env.SMTP_FROM,\n\t\t}),\n\t\tProviders.GitHub({\n\t\t\tclientId: process.env.GITHUB_ID,\n\t\t\tclientSecret: process.env.GITHUB_SECRET,\n\t\t}),\n\t],\n\tsession: {\n\t\t// Use JSON Web Tokens for session instead of database sessions.\n\t\t// This option can be used with or without a database for users/accounts.\n\t\t// Note: `jwt` is automatically set to `true` if no database is specified.\n\t\tjwt: true,\n\n\t\t// Seconds - How long until an idle session expires and is no longer valid.\n\t\tmaxAge: 30 * 24 * 60 * 60, // 30 days\n\n\t\t// Seconds - Throttle how frequently to write to database to extend a session.\n\t\t// Use it to limit write operations. Set to 0 to always update the database.\n\t\t// Note: This option is ignored if using JSON Web Tokens\n\t\tupdateAge: 24 * 60 * 60, // 24 hours\n\t},\n\tcallbacks: {\n\t\tasync jwt(token, user) {\n\t\t\tif (user) {\n\t\t\t\tconsole.log(\"jwt\", user);\n\t\t\t\ttoken.accessToken = user.token;\n\t\t\t}\n\t\t\treturn token;\n\t\t},\n\t\tasync session(session, token) {\n\t\t\tdelete token.password;\n\t\t\tsession.user = token;\n\n\t\t\treturn await session;\n\t\t},\n\t},\n\tpages: {\n\t\tsignIn: \"/LoginRegister\",\n\t\tverifyRequest: \"/VerifyRequest\",\n\t\tnewUser: \"/NewUser\",\n\t},\n\t// @ts-ignore\n\tadapter: Adapters.Prisma.Adapter({\n\t\tprisma,\n\t}),\n\n\tsecret: process.env.SECRET,\n};\n"]},"metadata":{},"sourceType":"module"}