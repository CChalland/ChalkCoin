{"ast":null,"code":"import prisma from \"../../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\nimport axios from \"axios\";\n\nconst fetchData = async (sportKey) => await axios.get(`https://api.the-odds-api.com/v4/sports/${sportKey}/odds/?regions=us&oddsFormat=american&apiKey=${process.env.ODDS_API_KEY}`).then(res => ({\n  error: false,\n  odds: res.data\n})).catch(e => ({\n  error: true,\n  odds: null\n}));\n\nexport default (async (req, res) => {\n  const session = await getSession({\n    req\n  });\n  const oddsSportKeys = [{\n    displayName: \"NCAA Football\",\n    key: \"americanfootball_ncaaf\"\n  }, {\n    displayName: \"NFL\",\n    key: \"americanfootball_nfl\"\n  }, {\n    displayName: \"MLB\",\n    key: \"baseball_mlb\"\n  }, {\n    displayName: \"NBA\",\n    key: \"basketball_nba\"\n  }, {\n    displayName: \"NCAA Men's Basketball\",\n    key: \"\"\n  }, {\n    displayName: \"NHL\",\n    key: \"icehockey_nhl\"\n  }, {\n    displayName: \"WNBA\",\n    key: \"\"\n  }, {\n    displayName: \"MLS\",\n    key: \"soccer_usa_mls\"\n  }];\n\n  if (req.method !== \"POST\") {\n    return res.status(405).json({\n      message: \"Method not allowed\"\n    });\n  } else if (req.method === \"POST\") {\n    const bet = req.body;\n\n    if (session) {\n      const oddsKey = oddsSportKeys.find(sport => sport.displayName === bet.details.displayName);\n      let sportOdds, betOdds;\n\n      if (oddsKey.key) {\n        sportOdds = await fetchData(oddsKey.key);\n        betOdds = await sportOdds.odds.find(game => bet.details.name.includes(game.away_team) && bet.details.name.includes(game.home_team));\n      }\n\n      console.log(betOdds);\n\n      try {\n        let betData = {\n          amount: parseFloat(bet.amount),\n          details: JSON.stringify(bet.details),\n          currency: bet.currency,\n          requester: {\n            connect: {\n              id: session.user.id\n            }\n          }\n        };\n        if (betOdds) betData.odds = await betOdds;\n        if (bet.recipientId) betData.recipient = {\n          connect: {\n            id: bet.recipientId\n          }\n        };\n        const createdBet = await prisma.bet.create({\n          data: betData\n        });\n        return res.json(createdBet);\n      } catch (e) {\n        console.log(e);\n\n        if (e.code === \"P2002\") {\n          return res.json({\n            error: `There's already an account with that ${e.meta.target[0]}`\n          });\n        } // throw e;\n\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/api/createBet.js"],"names":["prisma","getSession","axios","fetchData","sportKey","get","process","env","ODDS_API_KEY","then","res","error","odds","data","catch","e","req","session","oddsSportKeys","displayName","key","method","status","json","message","bet","body","oddsKey","find","sport","details","sportOdds","betOdds","game","name","includes","away_team","home_team","console","log","betData","amount","parseFloat","JSON","stringify","currency","requester","connect","id","user","recipientId","recipient","createdBet","create","code","meta","target"],"mappings":"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","sourcesContent":["import prisma from \"../../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\nimport axios from \"axios\";\n\nconst fetchData = async (sportKey) =>\n\tawait axios\n\t\t.get(\n\t\t\t`https://api.the-odds-api.com/v4/sports/${sportKey}/odds/?regions=us&oddsFormat=american&apiKey=${process.env.ODDS_API_KEY}`\n\t\t)\n\t\t.then((res) => ({\n\t\t\terror: false,\n\t\t\todds: res.data,\n\t\t}))\n\t\t.catch((e) => ({\n\t\t\terror: true,\n\t\t\todds: null,\n\t\t}));\n\nexport default async (req, res) => {\n\tconst session = await getSession({ req });\n\tconst oddsSportKeys = [\n\t\t{ displayName: \"NCAA Football\", key: \"americanfootball_ncaaf\" },\n\t\t{ displayName: \"NFL\", key: \"americanfootball_nfl\" },\n\t\t{ displayName: \"MLB\", key: \"baseball_mlb\" },\n\t\t{ displayName: \"NBA\", key: \"basketball_nba\" },\n\t\t{ displayName: \"NCAA Men's Basketball\", key: \"\" },\n\t\t{ displayName: \"NHL\", key: \"icehockey_nhl\" },\n\t\t{ displayName: \"WNBA\", key: \"\" },\n\t\t{ displayName: \"MLS\", key: \"soccer_usa_mls\" },\n\t];\n\n\tif (req.method !== \"POST\") {\n\t\treturn res.status(405).json({ message: \"Method not allowed\" });\n\t} else if (req.method === \"POST\") {\n\t\tconst bet = req.body;\n\t\tif (session) {\n\t\t\tconst oddsKey = oddsSportKeys.find((sport) => sport.displayName === bet.details.displayName);\n\t\t\tlet sportOdds, betOdds;\n\t\t\tif (oddsKey.key) {\n\t\t\t\tsportOdds = await fetchData(oddsKey.key);\n\t\t\t\tbetOdds = await sportOdds.odds.find(\n\t\t\t\t\t(game) => bet.details.name.includes(game.away_team) && bet.details.name.includes(game.home_team)\n\t\t\t\t);\n\t\t\t}\n\t\t\tconsole.log(betOdds);\n\n\t\t\ttry {\n\t\t\t\tlet betData = {\n\t\t\t\t\tamount: parseFloat(bet.amount),\n\t\t\t\t\tdetails: JSON.stringify(bet.details),\n\t\t\t\t\tcurrency: bet.currency,\n\t\t\t\t\trequester: {\n\t\t\t\t\t\tconnect: {\n\t\t\t\t\t\t\tid: session.user.id,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tif (betOdds) betData.odds = await betOdds;\n\t\t\t\tif (bet.recipientId) betData.recipient = { connect: { id: bet.recipientId } };\n\t\t\t\tconst createdBet = await prisma.bet.create({\n\t\t\t\t\tdata: betData,\n\t\t\t\t});\n\t\t\t\treturn res.json(createdBet);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t\tif (e.code === \"P2002\") {\n\t\t\t\t\treturn res.json({ error: `There's already an account with that ${e.meta.target[0]}` });\n\t\t\t\t}\n\t\t\t\t// throw e;\n\t\t\t}\n\t\t}\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}