{"ast":null,"code":"import { getSession } from \"next-auth/client\";\nimport prisma from \"../../contexts/prisma\";\n\nconst betSorter = async bets => {\n  let sportWithBets = [];\n  const ncaafBets = bets.filter(bet => bet.details.sport === \"NCAA Football\").sort((a, b) => {\n    return new Date(a.details.date) - new Date(b.details.date);\n  });\n  const nflBets = bets.filter(bet => bet.details.sport === \"NFL\").sort((a, b) => {\n    new Date(a.details.date) - new Date(b.details.date);\n  });\n  const mlbBets = bets.filter(bet => bet.details.sport === \"MLB\").sort((a, b) => {\n    return new Date(a.details.date) - new Date(b.details.date);\n  });\n  const nbaBets = bets.filter(bet => bet.details.sport === \"NBA\").sort((a, b) => {\n    return new Date(a.details.date) - new Date(b.details.date);\n  });\n  const ncaabBets = bets.filter(bet => bet.details.sport === \"NCAA Men's Basketball\").sort((a, b) => {\n    return new Date(a.details.date) - new Date(b.details.date);\n  });\n  const nhlBets = bets.filter(bet => bet.details.sport === \"NHL\").sort((a, b) => {\n    return new Date(a.details.date) - new Date(b.details.date);\n  });\n  const wnbaBets = bets.filter(bet => bet.details.sport === \"WNBA\").sort((a, b) => {\n    return new Date(a.details.date) - new Date(b.details.date);\n  });\n  const mlsBets = bets.filter(bet => bet.details.sport === \"WNBA\").sort((a, b) => {\n    return new Date(a.details.date) - new Date(b.details.date);\n  });\n  if (ncaafBets.length > 0) sportWithBets.push({\n    icon: 1,\n    abbrv: \"NCAAF\",\n    sport: \"football\",\n    displayName: \"NCAA Football\",\n    league_name: \"college-football\",\n    bets: ncaafBets\n  });\n  if (nflBets.length > 0) sportWithBets.push({\n    icon: 2,\n    abbrv: \"NFL\",\n    sport: \"football\",\n    displayName: \"NFL\",\n    league_name: \"nfl\",\n    bets: nflBets\n  });\n  if (mlbBets.length > 0) sportWithBets.push({\n    icon: 3,\n    abbrv: \"MLB\",\n    sport: \"baseball\",\n    displayName: \"MLB\",\n    league_name: \"mlb\",\n    bets: mlbBets\n  });\n  if (nbaBets.length > 0) sportWithBets.push({\n    icon: 4,\n    abbrv: \"NBA\",\n    sport: \"basketball\",\n    displayName: \"NBA\",\n    league_name: \"nba\",\n    bets: nbaBets\n  });\n  if (ncaabBets.length > 0) sportWithBets.push({\n    icon: 5,\n    abbrv: \"NCAAB\",\n    sport: \"basketball\",\n    displayName: \"NCAA Men's Basketball\",\n    league_name: \"mens-college-basketball\",\n    bets: ncaabBets\n  });\n  if (nhlBets.length > 0) sportWithBets.push({\n    icon: 6,\n    abbrv: \"NHL\",\n    sport: \"hockey\",\n    displayName: \"NHL\",\n    league_name: \"nhl\",\n    bets: nhlBets\n  });\n  if (wnbaBets.length > 0) sportWithBets.push({\n    icon: 8,\n    abbrv: \"WNBA\",\n    sport: \"basketball\",\n    displayName: \"WNBA\",\n    league_name: \"wnba\",\n    bets: wnbaBets\n  });\n  if (mlsBets.length > 0) sportWithBets.push({\n    icon: 10,\n    abbrv: \"MLS\",\n    sport: \"soccer\",\n    displayName: \"MLS\",\n    league_name: \"mls\",\n    bets: mlsBets\n  });\n  return sportWithBets;\n};\n\nexport default (async (req, res) => {\n  const session = await getSession({\n    req\n  });\n\n  if (req.method === \"GET\") {\n    let openBets, recipientBets, acceptedBets, completedBets;\n\n    if (req.query.type === \"currentUser\") {\n      if (session) {\n        openBets = await prisma.bet.findMany({\n          where: {\n            AND: [{\n              accepted: false,\n              completed: false,\n              requesterId: session.user.id\n            }]\n          }\n        });\n        recipientBets = await prisma.bet.findMany({\n          where: {\n            AND: [{\n              accepted: false,\n              completed: false,\n              recipientId: session.user.id\n            }]\n          }\n        });\n        acceptedBets = await prisma.bet.findMany({\n          where: {\n            OR: [{\n              requesterId: session.user.id\n            }, {\n              accepterId: session.user.id\n            }],\n            AND: [{\n              accepted: true\n            }, {\n              completed: false\n            }]\n          },\n          include: {\n            accepter: {\n              select: {\n                walletAddress: true\n              }\n            },\n            requester: {\n              select: {\n                walletAddress: true\n              }\n            }\n          }\n        });\n        completedBets = await prisma.bet.findMany({\n          where: {\n            AND: [{\n              accepted: true,\n              completed: true\n            }, {\n              OR: [{\n                requesterId: session.user.id\n              }, {\n                accepterId: session.user.id\n              }]\n            }]\n          },\n          include: {\n            accepter: {\n              select: {\n                walletAddress: true\n              }\n            },\n            requester: {\n              select: {\n                walletAddress: true\n              }\n            }\n          }\n        });\n        return res.json({\n          pendingBets: {\n            openBets: await betSorter(openBets),\n            recipientBets: await betSorter(recipientBets)\n          },\n          acceptedBets: await betSorter(acceptedBets),\n          completedBets: await betSorter(completedBets)\n        });\n      } else {\n        return res.json({\n          error: true,\n          message: \"You are not logged in.\"\n        });\n      }\n    } else if (req.query.type === \"all\") {\n      openBets = await prisma.bet.findMany({\n        where: {\n          AND: [{\n            accepted: false,\n            completed: false\n          }, {\n            recipientId: null\n          }]\n        }\n      });\n      recipientBets = await prisma.bet.findMany({\n        where: {\n          accepted: false,\n          completed: false,\n          NOT: {\n            recipientId: null\n          }\n        }\n      });\n      acceptedBets = await prisma.bet.findMany({\n        where: {\n          AND: [{\n            accepted: true\n          }, {\n            completed: false\n          }]\n        },\n        include: {\n          accepter: {\n            select: {\n              walletAddress: true\n            }\n          },\n          requester: {\n            select: {\n              walletAddress: true\n            }\n          }\n        }\n      });\n      completedBets = await prisma.bet.findMany({\n        where: {\n          AND: [{\n            accepted: true,\n            completed: true\n          }, {\n            transactionId: null\n          }]\n        },\n        include: {\n          accepter: {\n            select: {\n              walletAddress: true\n            }\n          },\n          requester: {\n            select: {\n              walletAddress: true\n            }\n          }\n        }\n      });\n      return res.json({\n        pendingBets: {\n          openBets: await betSorter(openBets),\n          recipientBets: await betSorter(recipientBets)\n        },\n        acceptedBets: await betSorter(acceptedBets),\n        completedBets: completedBets\n      });\n    }\n  } else {\n    return res.status(405).json({\n      message: \"Method not allowed\"\n    });\n  }\n});","map":{"version":3,"sources":["/Users/colechalland/Projects/ChalkCoin/pages/api/bets.js"],"names":["getSession","prisma","betSorter","bets","sportWithBets","ncaafBets","filter","bet","details","sport","sort","a","b","Date","date","nflBets","mlbBets","nbaBets","ncaabBets","nhlBets","wnbaBets","mlsBets","length","push","icon","abbrv","displayName","league_name","req","res","session","method","openBets","recipientBets","acceptedBets","completedBets","query","type","findMany","where","AND","accepted","completed","requesterId","user","id","recipientId","OR","accepterId","include","accepter","select","walletAddress","requester","json","pendingBets","error","message","NOT","transactionId","status"],"mappings":"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","sourcesContent":["import { getSession } from \"next-auth/client\";\nimport prisma from \"../../contexts/prisma\";\n\nconst betSorter = async (bets) => {\n\tlet sportWithBets = [];\n\tconst ncaafBets = bets\n\t\t.filter((bet) => bet.details.sport === \"NCAA Football\")\n\t\t.sort((a, b) => {\n\t\t\treturn new Date(a.details.date) - new Date(b.details.date);\n\t\t});\n\tconst nflBets = bets\n\t\t.filter((bet) => bet.details.sport === \"NFL\")\n\t\t.sort((a, b) => {\n\t\t\tnew Date(a.details.date) - new Date(b.details.date);\n\t\t});\n\tconst mlbBets = bets\n\t\t.filter((bet) => bet.details.sport === \"MLB\")\n\t\t.sort((a, b) => {\n\t\t\treturn new Date(a.details.date) - new Date(b.details.date);\n\t\t});\n\tconst nbaBets = bets\n\t\t.filter((bet) => bet.details.sport === \"NBA\")\n\t\t.sort((a, b) => {\n\t\t\treturn new Date(a.details.date) - new Date(b.details.date);\n\t\t});\n\tconst ncaabBets = bets\n\t\t.filter((bet) => bet.details.sport === \"NCAA Men's Basketball\")\n\t\t.sort((a, b) => {\n\t\t\treturn new Date(a.details.date) - new Date(b.details.date);\n\t\t});\n\tconst nhlBets = bets\n\t\t.filter((bet) => bet.details.sport === \"NHL\")\n\t\t.sort((a, b) => {\n\t\t\treturn new Date(a.details.date) - new Date(b.details.date);\n\t\t});\n\tconst wnbaBets = bets\n\t\t.filter((bet) => bet.details.sport === \"WNBA\")\n\t\t.sort((a, b) => {\n\t\t\treturn new Date(a.details.date) - new Date(b.details.date);\n\t\t});\n\n\tconst mlsBets = bets\n\t\t.filter((bet) => bet.details.sport === \"WNBA\")\n\t\t.sort((a, b) => {\n\t\t\treturn new Date(a.details.date) - new Date(b.details.date);\n\t\t});\n\n\tif (ncaafBets.length > 0)\n\t\tsportWithBets.push({\n\t\t\ticon: 1,\n\t\t\tabbrv: \"NCAAF\",\n\t\t\tsport: \"football\",\n\t\t\tdisplayName: \"NCAA Football\",\n\t\t\tleague_name: \"college-football\",\n\t\t\tbets: ncaafBets,\n\t\t});\n\tif (nflBets.length > 0)\n\t\tsportWithBets.push({\n\t\t\ticon: 2,\n\t\t\tabbrv: \"NFL\",\n\t\t\tsport: \"football\",\n\t\t\tdisplayName: \"NFL\",\n\t\t\tleague_name: \"nfl\",\n\t\t\tbets: nflBets,\n\t\t});\n\tif (mlbBets.length > 0)\n\t\tsportWithBets.push({\n\t\t\ticon: 3,\n\t\t\tabbrv: \"MLB\",\n\t\t\tsport: \"baseball\",\n\t\t\tdisplayName: \"MLB\",\n\t\t\tleague_name: \"mlb\",\n\t\t\tbets: mlbBets,\n\t\t});\n\tif (nbaBets.length > 0)\n\t\tsportWithBets.push({\n\t\t\ticon: 4,\n\t\t\tabbrv: \"NBA\",\n\t\t\tsport: \"basketball\",\n\t\t\tdisplayName: \"NBA\",\n\t\t\tleague_name: \"nba\",\n\t\t\tbets: nbaBets,\n\t\t});\n\tif (ncaabBets.length > 0)\n\t\tsportWithBets.push({\n\t\t\ticon: 5,\n\t\t\tabbrv: \"NCAAB\",\n\t\t\tsport: \"basketball\",\n\t\t\tdisplayName: \"NCAA Men's Basketball\",\n\t\t\tleague_name: \"mens-college-basketball\",\n\t\t\tbets: ncaabBets,\n\t\t});\n\tif (nhlBets.length > 0)\n\t\tsportWithBets.push({\n\t\t\ticon: 6,\n\t\t\tabbrv: \"NHL\",\n\t\t\tsport: \"hockey\",\n\t\t\tdisplayName: \"NHL\",\n\t\t\tleague_name: \"nhl\",\n\t\t\tbets: nhlBets,\n\t\t});\n\tif (wnbaBets.length > 0)\n\t\tsportWithBets.push({\n\t\t\ticon: 8,\n\t\t\tabbrv: \"WNBA\",\n\t\t\tsport: \"basketball\",\n\t\t\tdisplayName: \"WNBA\",\n\t\t\tleague_name: \"wnba\",\n\t\t\tbets: wnbaBets,\n\t\t});\n\tif (mlsBets.length > 0)\n\t\tsportWithBets.push({\n\t\t\ticon: 10,\n\t\t\tabbrv: \"MLS\",\n\t\t\tsport: \"soccer\",\n\t\t\tdisplayName: \"MLS\",\n\t\t\tleague_name: \"mls\",\n\t\t\tbets: mlsBets,\n\t\t});\n\n\treturn sportWithBets;\n};\n\nexport default async (req, res) => {\n\tconst session = await getSession({ req });\n\tif (req.method === \"GET\") {\n\t\tlet openBets, recipientBets, acceptedBets, completedBets;\n\t\tif (req.query.type === \"currentUser\") {\n\t\t\tif (session) {\n\t\t\t\topenBets = await prisma.bet.findMany({\n\t\t\t\t\twhere: { AND: [{ accepted: false, completed: false, requesterId: session.user.id }] },\n\t\t\t\t});\n\t\t\t\trecipientBets = await prisma.bet.findMany({\n\t\t\t\t\twhere: { AND: [{ accepted: false, completed: false, recipientId: session.user.id }] },\n\t\t\t\t});\n\t\t\t\tacceptedBets = await prisma.bet.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tOR: [{ requesterId: session.user.id }, { accepterId: session.user.id }],\n\t\t\t\t\t\tAND: [{ accepted: true }, { completed: false }],\n\t\t\t\t\t},\n\t\t\t\t\tinclude: {\n\t\t\t\t\t\taccepter: {\n\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\twalletAddress: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\trequester: {\n\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\twalletAddress: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tcompletedBets = await prisma.bet.findMany({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\tAND: [\n\t\t\t\t\t\t\t{ accepted: true, completed: true },\n\t\t\t\t\t\t\t{ OR: [{ requesterId: session.user.id }, { accepterId: session.user.id }] },\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\tinclude: {\n\t\t\t\t\t\taccepter: {\n\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\twalletAddress: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\trequester: {\n\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\twalletAddress: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\treturn res.json({\n\t\t\t\t\tpendingBets: { openBets: await betSorter(openBets), recipientBets: await betSorter(recipientBets) },\n\t\t\t\t\tacceptedBets: await betSorter(acceptedBets),\n\t\t\t\t\tcompletedBets: await betSorter(completedBets),\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn res.json({ error: true, message: \"You are not logged in.\" });\n\t\t\t}\n\t\t} else if (req.query.type === \"all\") {\n\t\t\topenBets = await prisma.bet.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\tAND: [{ accepted: false, completed: false }, { recipientId: null }],\n\t\t\t\t},\n\t\t\t});\n\t\t\trecipientBets = await prisma.bet.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\taccepted: false,\n\t\t\t\t\tcompleted: false,\n\t\t\t\t\tNOT: {\n\t\t\t\t\t\trecipientId: null,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tacceptedBets = await prisma.bet.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\tAND: [{ accepted: true }, { completed: false }],\n\t\t\t\t},\n\t\t\t\tinclude: {\n\t\t\t\t\taccepter: {\n\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\twalletAddress: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\trequester: {\n\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\twalletAddress: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tcompletedBets = await prisma.bet.findMany({\n\t\t\t\twhere: {\n\t\t\t\t\tAND: [{ accepted: true, completed: true }, { transactionId: null }],\n\t\t\t\t},\n\t\t\t\tinclude: {\n\t\t\t\t\taccepter: {\n\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\twalletAddress: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\trequester: {\n\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\twalletAddress: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn res.json({\n\t\t\t\tpendingBets: { openBets: await betSorter(openBets), recipientBets: await betSorter(recipientBets) },\n\t\t\t\tacceptedBets: await betSorter(acceptedBets),\n\t\t\t\tcompletedBets: completedBets,\n\t\t\t});\n\t\t}\n\t} else {\n\t\treturn res.status(405).json({ message: \"Method not allowed\" });\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}