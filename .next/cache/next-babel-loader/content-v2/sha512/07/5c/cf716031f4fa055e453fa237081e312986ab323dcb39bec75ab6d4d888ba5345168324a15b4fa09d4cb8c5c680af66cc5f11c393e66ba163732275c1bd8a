{"ast":null,"code":"import prisma from \"../../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\nimport axios from \"axios\";\nimport { UserWallet } from \"../../helpers/UserWallet\";\n\nconst fetchData = async (sportKey) => await axios.get(`https://api.the-odds-api.com/v4/sports/${sportKey}/odds/?regions=us&oddsFormat=american&apiKey=${process.env.ODDS_API_KEY}`).then(res => ({\n  error: false,\n  odds: res.data\n})).catch(e => ({\n  error: true,\n  odds: null\n}));\n\nexport default (async (req, res) => {\n  const session = await getSession({\n    req\n  });\n  const oddsSportKeys = [{\n    displayName: \"NCAA Football\",\n    key: \"americanfootball_ncaaf\"\n  }, {\n    displayName: \"NFL\",\n    key: \"americanfootball_nfl\"\n  }, {\n    displayName: \"MLB\",\n    key: \"baseball_mlb\"\n  }, {\n    displayName: \"NBA\",\n    key: \"basketball_nba\"\n  }, {\n    displayName: \"NCAA Men's Basketball\",\n    key: \"\"\n  }, {\n    displayName: \"NHL\",\n    key: \"icehockey_nhl\"\n  }, {\n    displayName: \"WNBA\",\n    key: \"\"\n  }, {\n    displayName: \"MLS\",\n    key: \"soccer_usa_mls\"\n  }];\n\n  if (req.method === \"POST\") {\n    const bet = req.body;\n\n    if (session) {\n      const user = await UserWallet({\n        id: session.user.id\n      }, prisma);\n\n      if (user.balance - parseFloat(bet.amount) >= 0) {\n        try {\n          const oddsKey = oddsSportKeys.find(sport => sport.displayName === bet.details.sport);\n          let sportOdds, betOdds;\n\n          if (oddsKey.key) {\n            sportOdds = await fetchData(oddsKey.key);\n            betOdds = await sportOdds.odds.find(game => bet.details.name.includes(game.away_team) && bet.details.name.includes(game.home_team));\n          }\n\n          let betData = {\n            amount: parseFloat(bet.amount),\n            details: bet.details,\n            currency: bet.currency\n          };\n          if (betOdds) betData.odds = await betOdds;\n          if (bet.recipientId) betData.recipient = {\n            connect: {\n              id: bet.recipientId\n            }\n          };\n          const getUser = await prisma.user.update({\n            where: {\n              id: session.user.id\n            },\n            data: {\n              balance: {\n                decrement: parseFloat(bet.amount)\n              },\n              requester: {\n                create: betData\n              }\n            },\n            include: {\n              requester: {\n                orderBy: {\n                  id: \"desc\"\n                }\n              }\n            }\n          });\n          const createdBet = await getUser.requester[0];\n          console.log(betOdds);\n          return res.json(createdBet);\n        } catch (e) {\n          console.log(e); // if (e.code === \"P2002\") {\n          // \treturn res.json({ error: `There's already an bet with that ${e.meta.target[0]}` });\n          // }\n          // throw e;\n        }\n      } else {\n        return res.json({\n          error: true,\n          message: \"You don't have enough funds!\"\n        });\n      }\n    }\n  } else {\n    return res.status(405).json({\n      message: \"Method not allowed\"\n    });\n  }\n});","map":{"version":3,"sources":["/Users/colechalland/Projects/ChalkCoin/pages/api/createBet.js"],"names":["prisma","getSession","axios","UserWallet","fetchData","sportKey","get","process","env","ODDS_API_KEY","then","res","error","odds","data","catch","e","req","session","oddsSportKeys","displayName","key","method","bet","body","user","id","balance","parseFloat","amount","oddsKey","find","sport","details","sportOdds","betOdds","game","name","includes","away_team","home_team","betData","currency","recipientId","recipient","connect","getUser","update","where","decrement","requester","create","include","orderBy","createdBet","console","log","json","message","status"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,MAAMC,SAAS,GAAG,OAAOC,QAAP,KACjB,MAAMH,KAAK,CACTI,GADI,CAEH,0CAAyCD,QAAS,gDAA+CE,OAAO,CAACC,GAAR,CAAYC,YAAa,EAFvH,EAIJC,IAJI,CAIEC,GAAD,KAAU;AACfC,EAAAA,KAAK,EAAE,KADQ;AAEfC,EAAAA,IAAI,EAAEF,GAAG,CAACG;AAFK,CAAV,CAJD,EAQJC,KARI,CAQGC,CAAD,KAAQ;AACdJ,EAAAA,KAAK,EAAE,IADO;AAEdC,EAAAA,IAAI,EAAE;AAFQ,CAAR,CARF,CADP;;AAcA,gBAAe,OAAOI,GAAP,EAAYN,GAAZ,KAAoB;AAClC,QAAMO,OAAO,GAAG,MAAMjB,UAAU,CAAC;AAAEgB,IAAAA;AAAF,GAAD,CAAhC;AACA,QAAME,aAAa,GAAG,CACrB;AAAEC,IAAAA,WAAW,EAAE,eAAf;AAAgCC,IAAAA,GAAG,EAAE;AAArC,GADqB,EAErB;AAAED,IAAAA,WAAW,EAAE,KAAf;AAAsBC,IAAAA,GAAG,EAAE;AAA3B,GAFqB,EAGrB;AAAED,IAAAA,WAAW,EAAE,KAAf;AAAsBC,IAAAA,GAAG,EAAE;AAA3B,GAHqB,EAIrB;AAAED,IAAAA,WAAW,EAAE,KAAf;AAAsBC,IAAAA,GAAG,EAAE;AAA3B,GAJqB,EAKrB;AAAED,IAAAA,WAAW,EAAE,uBAAf;AAAwCC,IAAAA,GAAG,EAAE;AAA7C,GALqB,EAMrB;AAAED,IAAAA,WAAW,EAAE,KAAf;AAAsBC,IAAAA,GAAG,EAAE;AAA3B,GANqB,EAOrB;AAAED,IAAAA,WAAW,EAAE,MAAf;AAAuBC,IAAAA,GAAG,EAAE;AAA5B,GAPqB,EAQrB;AAAED,IAAAA,WAAW,EAAE,KAAf;AAAsBC,IAAAA,GAAG,EAAE;AAA3B,GARqB,CAAtB;;AAWA,MAAIJ,GAAG,CAACK,MAAJ,KAAe,MAAnB,EAA2B;AAC1B,UAAMC,GAAG,GAAGN,GAAG,CAACO,IAAhB;;AACA,QAAIN,OAAJ,EAAa;AACZ,YAAMO,IAAI,GAAG,MAAMtB,UAAU,CAAC;AAAEuB,QAAAA,EAAE,EAAER,OAAO,CAACO,IAAR,CAAaC;AAAnB,OAAD,EAA0B1B,MAA1B,CAA7B;;AAEA,UAAIyB,IAAI,CAACE,OAAL,GAAeC,UAAU,CAACL,GAAG,CAACM,MAAL,CAAzB,IAAyC,CAA7C,EAAgD;AAC/C,YAAI;AACH,gBAAMC,OAAO,GAAGX,aAAa,CAACY,IAAd,CAAoBC,KAAD,IAAWA,KAAK,CAACZ,WAAN,KAAsBG,GAAG,CAACU,OAAJ,CAAYD,KAAhE,CAAhB;AACA,cAAIE,SAAJ,EAAeC,OAAf;;AACA,cAAIL,OAAO,CAACT,GAAZ,EAAiB;AAChBa,YAAAA,SAAS,GAAG,MAAM9B,SAAS,CAAC0B,OAAO,CAACT,GAAT,CAA3B;AACAc,YAAAA,OAAO,GAAG,MAAMD,SAAS,CAACrB,IAAV,CAAekB,IAAf,CACdK,IAAD,IAAUb,GAAG,CAACU,OAAJ,CAAYI,IAAZ,CAAiBC,QAAjB,CAA0BF,IAAI,CAACG,SAA/B,KAA6ChB,GAAG,CAACU,OAAJ,CAAYI,IAAZ,CAAiBC,QAAjB,CAA0BF,IAAI,CAACI,SAA/B,CADxC,CAAhB;AAGA;;AACD,cAAIC,OAAO,GAAG;AACbZ,YAAAA,MAAM,EAAED,UAAU,CAACL,GAAG,CAACM,MAAL,CADL;AAEbI,YAAAA,OAAO,EAAEV,GAAG,CAACU,OAFA;AAGbS,YAAAA,QAAQ,EAAEnB,GAAG,CAACmB;AAHD,WAAd;AAKA,cAAIP,OAAJ,EAAaM,OAAO,CAAC5B,IAAR,GAAe,MAAMsB,OAArB;AACb,cAAIZ,GAAG,CAACoB,WAAR,EAAqBF,OAAO,CAACG,SAAR,GAAoB;AAAEC,YAAAA,OAAO,EAAE;AAAEnB,cAAAA,EAAE,EAAEH,GAAG,CAACoB;AAAV;AAAX,WAApB;AAErB,gBAAMG,OAAO,GAAG,MAAM9C,MAAM,CAACyB,IAAP,CAAYsB,MAAZ,CAAmB;AACxCC,YAAAA,KAAK,EAAE;AAAEtB,cAAAA,EAAE,EAAER,OAAO,CAACO,IAAR,CAAaC;AAAnB,aADiC;AAExCZ,YAAAA,IAAI,EAAE;AACLa,cAAAA,OAAO,EAAE;AAAEsB,gBAAAA,SAAS,EAAErB,UAAU,CAACL,GAAG,CAACM,MAAL;AAAvB,eADJ;AAELqB,cAAAA,SAAS,EAAE;AAAEC,gBAAAA,MAAM,EAAEV;AAAV;AAFN,aAFkC;AAMxCW,YAAAA,OAAO,EAAE;AACRF,cAAAA,SAAS,EAAE;AACVG,gBAAAA,OAAO,EAAE;AACR3B,kBAAAA,EAAE,EAAE;AADI;AADC;AADH;AAN+B,WAAnB,CAAtB;AAcA,gBAAM4B,UAAU,GAAG,MAAMR,OAAO,CAACI,SAAR,CAAkB,CAAlB,CAAzB;AAEAK,UAAAA,OAAO,CAACC,GAAR,CAAYrB,OAAZ;AACA,iBAAOxB,GAAG,CAAC8C,IAAJ,CAASH,UAAT,CAAP;AACA,SAnCD,CAmCE,OAAOtC,CAAP,EAAU;AACXuC,UAAAA,OAAO,CAACC,GAAR,CAAYxC,CAAZ,EADW,CAEX;AACA;AACA;AACA;AACA;AACD,OA3CD,MA2CO;AACN,eAAOL,GAAG,CAAC8C,IAAJ,CAAS;AAAE7C,UAAAA,KAAK,EAAE,IAAT;AAAe8C,UAAAA,OAAO,EAAE;AAAxB,SAAT,CAAP;AACA;AACD;AACD,GApDD,MAoDO;AACN,WAAO/C,GAAG,CAACgD,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACA;AACD,CApED","sourcesContent":["import prisma from \"../../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\nimport axios from \"axios\";\nimport { UserWallet } from \"../../helpers/UserWallet\";\n\nconst fetchData = async (sportKey) =>\n\tawait axios\n\t\t.get(\n\t\t\t`https://api.the-odds-api.com/v4/sports/${sportKey}/odds/?regions=us&oddsFormat=american&apiKey=${process.env.ODDS_API_KEY}`\n\t\t)\n\t\t.then((res) => ({\n\t\t\terror: false,\n\t\t\todds: res.data,\n\t\t}))\n\t\t.catch((e) => ({\n\t\t\terror: true,\n\t\t\todds: null,\n\t\t}));\n\nexport default async (req, res) => {\n\tconst session = await getSession({ req });\n\tconst oddsSportKeys = [\n\t\t{ displayName: \"NCAA Football\", key: \"americanfootball_ncaaf\" },\n\t\t{ displayName: \"NFL\", key: \"americanfootball_nfl\" },\n\t\t{ displayName: \"MLB\", key: \"baseball_mlb\" },\n\t\t{ displayName: \"NBA\", key: \"basketball_nba\" },\n\t\t{ displayName: \"NCAA Men's Basketball\", key: \"\" },\n\t\t{ displayName: \"NHL\", key: \"icehockey_nhl\" },\n\t\t{ displayName: \"WNBA\", key: \"\" },\n\t\t{ displayName: \"MLS\", key: \"soccer_usa_mls\" },\n\t];\n\n\tif (req.method === \"POST\") {\n\t\tconst bet = req.body;\n\t\tif (session) {\n\t\t\tconst user = await UserWallet({ id: session.user.id }, prisma);\n\n\t\t\tif (user.balance - parseFloat(bet.amount) >= 0) {\n\t\t\t\ttry {\n\t\t\t\t\tconst oddsKey = oddsSportKeys.find((sport) => sport.displayName === bet.details.sport);\n\t\t\t\t\tlet sportOdds, betOdds;\n\t\t\t\t\tif (oddsKey.key) {\n\t\t\t\t\t\tsportOdds = await fetchData(oddsKey.key);\n\t\t\t\t\t\tbetOdds = await sportOdds.odds.find(\n\t\t\t\t\t\t\t(game) => bet.details.name.includes(game.away_team) && bet.details.name.includes(game.home_team)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tlet betData = {\n\t\t\t\t\t\tamount: parseFloat(bet.amount),\n\t\t\t\t\t\tdetails: bet.details,\n\t\t\t\t\t\tcurrency: bet.currency,\n\t\t\t\t\t};\n\t\t\t\t\tif (betOdds) betData.odds = await betOdds;\n\t\t\t\t\tif (bet.recipientId) betData.recipient = { connect: { id: bet.recipientId } };\n\n\t\t\t\t\tconst getUser = await prisma.user.update({\n\t\t\t\t\t\twhere: { id: session.user.id },\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tbalance: { decrement: parseFloat(bet.amount) },\n\t\t\t\t\t\t\trequester: { create: betData },\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinclude: {\n\t\t\t\t\t\t\trequester: {\n\t\t\t\t\t\t\t\torderBy: {\n\t\t\t\t\t\t\t\t\tid: \"desc\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tconst createdBet = await getUser.requester[0];\n\n\t\t\t\t\tconsole.log(betOdds);\n\t\t\t\t\treturn res.json(createdBet);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t// if (e.code === \"P2002\") {\n\t\t\t\t\t// \treturn res.json({ error: `There's already an bet with that ${e.meta.target[0]}` });\n\t\t\t\t\t// }\n\t\t\t\t\t// throw e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn res.json({ error: true, message: \"You don't have enough funds!\" });\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn res.status(405).json({ message: \"Method not allowed\" });\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}