{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/bets.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Container, Row, Col, Card, Form, InputGroup } from \"react-bootstrap\";\nimport { SportContext } from \"../contexts/Sports.Context\";\nimport { getSession } from \"next-auth/client\";\nimport BetCard from \"../components/BetCard\";\nimport axios from \"axios\"; // async function fetchBetsJSON() {\n// \tconst res = await fetch(\"http://localhost:4000/api/bets\");\n// \tconst bets = await res.json();\n// \treturn bets;\n// }\n\nfunction Bets(props) {\n  const {\n    betsData,\n    currentUser\n  } = props;\n  const {\n    sportsData\n  } = useContext(SportContext);\n  const {\n    0: bets,\n    1: setBets\n  } = useState(betsData);\n  const betsGames = betsData.map(bet => {\n    var _sport$data$events;\n\n    const sport = sportsData.find(sport => sport.display_name === bet.details.displayName);\n    const event = (_sport$data$events = sport.data.events) === null || _sport$data$events === void 0 ? void 0 : _sport$data$events.find(event => event.id === bet.details.id);\n    bet.event = event;\n    return bet;\n  }); // useEffect(() => {\n  // \tconst getData = async () => {\n  // \t\tfetchBetsJSON().then((bets) => {\n  // \t\t\tsetBets(bets);\n  // \t\t});\n  // \t};\n  // \tgetData();\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(Card.Header, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                children: \"BETS: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                  className: recipientState ? \"has-success\" : \"has-error\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                    name: \"type\",\n                    type: \"hidden\",\n                    value: betType\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 45,\n                    columnNumber: 11\n                  }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n                    children: [/*#__PURE__*/_jsxDEV(InputGroup.Prepend, {\n                      children: /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                        children: /*#__PURE__*/_jsxDEV(\"i\", {\n                          className: \"nc-icon nc-single-02\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 49,\n                          columnNumber: 14\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 48,\n                        columnNumber: 13\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 47,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      xs: 9,\n                      lg: 9,\n                      className: \"mx-0 px-0\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 52,\n                      columnNumber: 12\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 46,\n                    columnNumber: 11\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 10\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(BetCard, {\n      betsData: bets,\n      currentUser: currentUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n}\n\nexport default Bets;\nexport async function getServerSideProps(context) {\n  const {\n    req,\n    res\n  } = context;\n  const session = await getSession({\n    req\n  });\n  let currentUser = {};\n\n  if (session) {\n    currentUser = await prisma.user.findUnique({\n      where: {\n        id: session.user.id\n      }\n    });\n    delete currentUser.password;\n    delete currentUser.paypal;\n    delete currentUser.emailVerified;\n    delete currentUser.createdAt;\n    delete currentUser.updatedAt;\n  }\n\n  let bets = await prisma.bet.findMany({\n    where: {\n      accepted: false\n    }\n  });\n  const betPromises = bets.map(async bet => {\n    bet.details = JSON.parse(bet.details);\n    bet.createdAt = JSON.stringify(bet.createdAt);\n    bet.updatedAt = JSON.stringify(bet.updatedAt);\n    return bet;\n  });\n  const betsData = await Promise.all(betPromises);\n  return {\n    props: {\n      currentUser,\n      betsData\n    }\n  };\n}","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/bets.js"],"names":["React","useContext","useEffect","useState","Container","Row","Col","Card","Form","InputGroup","SportContext","getSession","BetCard","axios","Bets","props","betsData","currentUser","sportsData","bets","setBets","betsGames","map","bet","sport","find","display_name","details","displayName","event","data","events","id","recipientState","betType","getServerSideProps","context","req","res","session","prisma","user","findUnique","where","password","paypal","emailVerified","createdAt","updatedAt","findMany","accepted","betPromises","JSON","parse","stringify","Promise","all"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { Container, Row, Col, Card, Form, InputGroup } from \"react-bootstrap\";\nimport { SportContext } from \"../contexts/Sports.Context\";\nimport { getSession } from \"next-auth/client\";\nimport BetCard from \"../components/BetCard\";\nimport axios from \"axios\";\n\n// async function fetchBetsJSON() {\n// \tconst res = await fetch(\"http://localhost:4000/api/bets\");\n// \tconst bets = await res.json();\n// \treturn bets;\n// }\n\nfunction Bets(props) {\n\tconst { betsData, currentUser } = props;\n\tconst { sportsData } = useContext(SportContext);\n\tconst [bets, setBets] = useState(betsData);\n\n\tconst betsGames = betsData.map((bet) => {\n\t\tconst sport = sportsData.find((sport) => sport.display_name === bet.details.displayName);\n\t\tconst event = sport.data.events?.find((event) => event.id === bet.details.id);\n\t\tbet.event = event;\n\t\treturn bet;\n\t});\n\n\t// useEffect(() => {\n\t// \tconst getData = async () => {\n\t// \t\tfetchBetsJSON().then((bets) => {\n\t// \t\t\tsetBets(bets);\n\t// \t\t});\n\t// \t};\n\t// \tgetData();\n\t// }, []);\n\n\treturn (\n\t\t<Container fluid>\n\t\t\t<Row>\n\t\t\t\t<Col>\n\t\t\t\t\t<Form>\n\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t\t\t<Col>{\"BETS: \"}</Col>\n\t\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t\t<Form.Group className={recipientState ? \"has-success\" : \"has-error\"}>\n\t\t\t\t\t\t\t\t\t\t<Form.Control name=\"type\" type=\"hidden\" value={betType} />\n\t\t\t\t\t\t\t\t\t\t<InputGroup>\n\t\t\t\t\t\t\t\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t\t\t\t\t\t\t\t<InputGroup.Text>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"nc-icon nc-single-02\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t</InputGroup.Text>\n\t\t\t\t\t\t\t\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={9} lg={9} className=\"mx-0 px-0\"></Col>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Card.Header>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Form>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<BetCard betsData={bets} currentUser={currentUser} />\n\t\t</Container>\n\t);\n}\n\nexport default Bets;\n\nexport async function getServerSideProps(context) {\n\tconst { req, res } = context;\n\tconst session = await getSession({ req });\n\tlet currentUser = {};\n\tif (session) {\n\t\tcurrentUser = await prisma.user.findUnique({\n\t\t\twhere: {\n\t\t\t\tid: session.user.id,\n\t\t\t},\n\t\t});\n\t\tdelete currentUser.password;\n\t\tdelete currentUser.paypal;\n\t\tdelete currentUser.emailVerified;\n\t\tdelete currentUser.createdAt;\n\t\tdelete currentUser.updatedAt;\n\t}\n\n\tlet bets = await prisma.bet.findMany({\n\t\twhere: {\n\t\t\taccepted: false,\n\t\t},\n\t});\n\tconst betPromises = bets.map(async (bet) => {\n\t\tbet.details = JSON.parse(bet.details);\n\t\tbet.createdAt = JSON.stringify(bet.createdAt);\n\t\tbet.updatedAt = JSON.stringify(bet.updatedAt);\n\t\treturn bet;\n\t});\n\tconst betsData = await Promise.all(betPromises);\n\n\treturn {\n\t\tprops: { currentUser, betsData },\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}