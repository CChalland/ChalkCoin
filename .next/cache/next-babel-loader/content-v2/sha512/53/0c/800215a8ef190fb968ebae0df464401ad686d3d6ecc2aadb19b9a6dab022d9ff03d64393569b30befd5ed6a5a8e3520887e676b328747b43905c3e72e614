{"ast":null,"code":"import prisma from \"../../prisma/prisma\";\nimport { getSession } from \"next-auth/client\";\nexport default (async (req, res) => {\n  const session = await getSession({\n    req\n  });\n\n  if (req.method === \"GET\") {\n    let user;\n\n    if (session.user.name) {\n      user = await prisma.user.findUnique({\n        where: {\n          name: session.user.name\n        },\n        include: {\n          requester: true,\n          accepter: true\n        }\n      });\n    } else {\n      user = await prisma.user.findUnique({\n        where: {\n          email: session.user.email\n        },\n        include: {\n          requester: true,\n          accepter: true\n        }\n      });\n      return res.json(user);\n    }\n  } else if (req.method === \"POST\") {\n    const user = JSON.parse(req.body);\n    const updatedUser = await prisma.user.update({\n      where: {\n        email: session.user.email\n      },\n      data: user\n    });\n    return res.json(updatedUser);\n  }\n});","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/api/user.js"],"names":["prisma","getSession","req","res","session","method","user","name","findUnique","where","include","requester","accepter","email","json","JSON","parse","body","updatedUser","update","data"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAMC,OAAO,GAAG,MAAMH,UAAU,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAAhC;;AAEA,MAAIA,GAAG,CAACG,MAAJ,KAAe,KAAnB,EAA0B;AACzB,QAAIC,IAAJ;;AACA,QAAIF,OAAO,CAACE,IAAR,CAAaC,IAAjB,EAAuB;AACtBD,MAAAA,IAAI,GAAG,MAAMN,MAAM,CAACM,IAAP,CAAYE,UAAZ,CAAuB;AACnCC,QAAAA,KAAK,EAAE;AACNF,UAAAA,IAAI,EAAEH,OAAO,CAACE,IAAR,CAAaC;AADb,SAD4B;AAInCG,QAAAA,OAAO,EAAE;AACRC,UAAAA,SAAS,EAAE,IADH;AAERC,UAAAA,QAAQ,EAAE;AAFF;AAJ0B,OAAvB,CAAb;AASA,KAVD,MAUO;AACNN,MAAAA,IAAI,GAAG,MAAMN,MAAM,CAACM,IAAP,CAAYE,UAAZ,CAAuB;AACnCC,QAAAA,KAAK,EAAE;AACNI,UAAAA,KAAK,EAAET,OAAO,CAACE,IAAR,CAAaO;AADd,SAD4B;AAInCH,QAAAA,OAAO,EAAE;AACRC,UAAAA,SAAS,EAAE,IADH;AAERC,UAAAA,QAAQ,EAAE;AAFF;AAJ0B,OAAvB,CAAb;AASA,aAAOT,GAAG,CAACW,IAAJ,CAASR,IAAT,CAAP;AACA;AACD,GAxBD,MAwBO,IAAIJ,GAAG,CAACG,MAAJ,KAAe,MAAnB,EAA2B;AACjC,UAAMC,IAAI,GAAGS,IAAI,CAACC,KAAL,CAAWd,GAAG,CAACe,IAAf,CAAb;AAEA,UAAMC,WAAW,GAAG,MAAMlB,MAAM,CAACM,IAAP,CAAYa,MAAZ,CAAmB;AAC5CV,MAAAA,KAAK,EAAE;AACNI,QAAAA,KAAK,EAAET,OAAO,CAACE,IAAR,CAAaO;AADd,OADqC;AAI5CO,MAAAA,IAAI,EAAEd;AAJsC,KAAnB,CAA1B;AAMA,WAAOH,GAAG,CAACW,IAAJ,CAASI,WAAT,CAAP;AACA;AACD,CAtCD","sourcesContent":["import prisma from \"../../prisma/prisma\";\nimport { getSession } from \"next-auth/client\";\n\nexport default async (req, res) => {\n\tconst session = await getSession({ req });\n\n\tif (req.method === \"GET\") {\n\t\tlet user;\n\t\tif (session.user.name) {\n\t\t\tuser = await prisma.user.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\tname: session.user.name,\n\t\t\t\t},\n\t\t\t\tinclude: {\n\t\t\t\t\trequester: true,\n\t\t\t\t\taccepter: true,\n\t\t\t\t},\n\t\t\t});\n\t\t} else {\n\t\t\tuser = await prisma.user.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\temail: session.user.email,\n\t\t\t\t},\n\t\t\t\tinclude: {\n\t\t\t\t\trequester: true,\n\t\t\t\t\taccepter: true,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn res.json(user);\n\t\t}\n\t} else if (req.method === \"POST\") {\n\t\tconst user = JSON.parse(req.body);\n\n\t\tconst updatedUser = await prisma.user.update({\n\t\t\twhere: {\n\t\t\t\temail: session.user.email,\n\t\t\t},\n\t\t\tdata: user,\n\t\t});\n\t\treturn res.json(updatedUser);\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}