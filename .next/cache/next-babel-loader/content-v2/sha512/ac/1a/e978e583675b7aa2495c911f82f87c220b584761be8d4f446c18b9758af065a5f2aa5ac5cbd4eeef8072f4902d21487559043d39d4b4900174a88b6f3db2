{"ast":null,"code":"import prisma from \"../../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\nimport { hashSync } from \"bcrypt\";\nexport default (async (req, res) => {\n  const session = await getSession({\n    req\n  });\n\n  if (req.method === \"GET\") {\n    const user = await prisma.user.findUnique({\n      where: {\n        id: session.user.id\n      },\n      include: {\n        requester: true,\n        accepter: true\n      }\n    });\n    return res.json(user);\n  } else if (req.method === \"POST\") {\n    const user = req.body;\n    const updatedUser = await prisma.user.update({\n      where: {\n        id: session.user.id\n      },\n      data: user\n    });\n    return res.json(updatedUser);\n  }\n});","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/api/user.js"],"names":["prisma","getSession","hashSync","req","res","session","method","user","findUnique","where","id","include","requester","accepter","json","body","updatedUser","update","data"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,QAAzB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAMC,OAAO,GAAG,MAAMJ,UAAU,CAAC;AAAEE,IAAAA;AAAF,GAAD,CAAhC;;AAEA,MAAIA,GAAG,CAACG,MAAJ,KAAe,KAAnB,EAA0B;AACzB,UAAMC,IAAI,GAAG,MAAMP,MAAM,CAACO,IAAP,CAAYC,UAAZ,CAAuB;AACzCC,MAAAA,KAAK,EAAE;AACNC,QAAAA,EAAE,EAAEL,OAAO,CAACE,IAAR,CAAaG;AADX,OADkC;AAIzCC,MAAAA,OAAO,EAAE;AACRC,QAAAA,SAAS,EAAE,IADH;AAERC,QAAAA,QAAQ,EAAE;AAFF;AAJgC,KAAvB,CAAnB;AASA,WAAOT,GAAG,CAACU,IAAJ,CAASP,IAAT,CAAP;AACA,GAXD,MAWO,IAAIJ,GAAG,CAACG,MAAJ,KAAe,MAAnB,EAA2B;AACjC,UAAMC,IAAI,GAAGJ,GAAG,CAACY,IAAjB;AAEA,UAAMC,WAAW,GAAG,MAAMhB,MAAM,CAACO,IAAP,CAAYU,MAAZ,CAAmB;AAC5CR,MAAAA,KAAK,EAAE;AACNC,QAAAA,EAAE,EAAEL,OAAO,CAACE,IAAR,CAAaG;AADX,OADqC;AAI5CQ,MAAAA,IAAI,EAAEX;AAJsC,KAAnB,CAA1B;AAMA,WAAOH,GAAG,CAACU,IAAJ,CAASE,WAAT,CAAP;AACA;AACD,CAzBD","sourcesContent":["import prisma from \"../../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\nimport { hashSync } from \"bcrypt\";\n\nexport default async (req, res) => {\n\tconst session = await getSession({ req });\n\n\tif (req.method === \"GET\") {\n\t\tconst user = await prisma.user.findUnique({\n\t\t\twhere: {\n\t\t\t\tid: session.user.id,\n\t\t\t},\n\t\t\tinclude: {\n\t\t\t\trequester: true,\n\t\t\t\taccepter: true,\n\t\t\t},\n\t\t});\n\t\treturn res.json(user);\n\t} else if (req.method === \"POST\") {\n\t\tconst user = req.body;\n\n\t\tconst updatedUser = await prisma.user.update({\n\t\t\twhere: {\n\t\t\t\tid: session.user.id,\n\t\t\t},\n\t\t\tdata: user,\n\t\t});\n\t\treturn res.json(updatedUser);\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}