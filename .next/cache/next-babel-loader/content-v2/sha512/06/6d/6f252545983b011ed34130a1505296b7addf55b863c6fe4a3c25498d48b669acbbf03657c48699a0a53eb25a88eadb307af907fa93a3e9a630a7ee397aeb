{"ast":null,"code":"import axios from \"axios\";\nexport async function UserWallet(user, prisma) {\n  try {\n    var _userBlockchainData$d;\n\n    const userData = await prisma.user.findUnique({\n      where: {\n        id: user.id\n      },\n      select: {\n        id: true,\n        balance: true,\n        walletAddress: true,\n        requester: {\n          select: {\n            id: true\n          }\n        }\n      }\n    });\n    const winningBets = await prisma.bet.findMany({\n      where: {\n        AND: [{\n          OR: [{\n            requesterId: user.id\n          }, {\n            accepterId: user.id\n          }]\n        }, {\n          winnerId: user.id\n        }, {\n          accepted: true\n        }, {\n          completed: true\n        }]\n      },\n      select: {\n        id: true,\n        amount: true\n      }\n    });\n    const losingBets = await prisma.bet.findMany({\n      where: {\n        AND: [{\n          OR: [{\n            requesterId: user.id\n          }, {\n            accepterId: user.id\n          }]\n        }, {\n          OR: [{\n            winnerId: null\n          }, {\n            NOT: [{\n              winnerId: user.id\n            }]\n          }]\n        }]\n      },\n      select: {\n        id: true,\n        amount: true\n      }\n    });\n    const userBlockchainData = await axios.get(`${process.env.BLOCKCHAIN_URL}/address/${userData.walletAddress}`);\n    const userRewards = (_userBlockchainData$d = userBlockchainData.data.addressTransactions) === null || _userBlockchainData$d === void 0 ? void 0 : _userBlockchainData$d.filter(transaction => transaction.details.type).reduce((prev, cur) => prev + cur.amount, 0);\n    const balance = userRewards + winningBets.reduce((prev, cur) => prev + cur.amount, 0) - losingBets.reduce((prev, cur) => prev + cur.amount, 0);\n    return {\n      id: userData.id,\n      balance: userData.balance,\n      address: userData.walletAddress,\n      requester: userData.requester\n    };\n  } catch (error) {\n    return error;\n  }\n}\nexport async function UpdateWinner(user) {}","map":{"version":3,"sources":["/Users/colechalland/Projects/ChalkCoin/helpers/UserWallet.js"],"names":["axios","UserWallet","user","prisma","userData","findUnique","where","id","select","balance","walletAddress","requester","winningBets","bet","findMany","AND","OR","requesterId","accepterId","winnerId","accepted","completed","amount","losingBets","NOT","userBlockchainData","get","process","env","BLOCKCHAIN_URL","userRewards","data","addressTransactions","filter","transaction","details","type","reduce","prev","cur","address","error","UpdateWinner"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nexport async function UserWallet(user, prisma) {\n\ttry {\n\t\tconst userData = await prisma.user.findUnique({\n\t\t\twhere: { id: user.id },\n\t\t\tselect: { id: true, balance: true, walletAddress: true, requester: { select: { id: true } } },\n\t\t});\n\t\tconst winningBets = await prisma.bet.findMany({\n\t\t\twhere: {\n\t\t\t\tAND: [\n\t\t\t\t\t{ OR: [{ requesterId: user.id }, { accepterId: user.id }] },\n\t\t\t\t\t{ winnerId: user.id },\n\t\t\t\t\t{ accepted: true },\n\t\t\t\t\t{ completed: true },\n\t\t\t\t],\n\t\t\t},\n\t\t\tselect: { id: true, amount: true },\n\t\t});\n\t\tconst losingBets = await prisma.bet.findMany({\n\t\t\twhere: {\n\t\t\t\tAND: [\n\t\t\t\t\t{ OR: [{ requesterId: user.id }, { accepterId: user.id }] },\n\t\t\t\t\t{ OR: [{ winnerId: null }, { NOT: [{ winnerId: user.id }] }] },\n\t\t\t\t],\n\t\t\t},\n\t\t\tselect: { id: true, amount: true },\n\t\t});\n\n\t\tconst userBlockchainData = await axios.get(\n\t\t\t`${process.env.BLOCKCHAIN_URL}/address/${userData.walletAddress}`\n\t\t);\n\t\tconst userRewards = userBlockchainData.data.addressTransactions\n\t\t\t?.filter((transaction) => transaction.details.type)\n\t\t\t.reduce((prev, cur) => prev + cur.amount, 0);\n\n\t\tconst balance =\n\t\t\tuserRewards +\n\t\t\twinningBets.reduce((prev, cur) => prev + cur.amount, 0) -\n\t\t\tlosingBets.reduce((prev, cur) => prev + cur.amount, 0);\n\n\t\treturn {\n\t\t\tid: userData.id,\n\t\t\tbalance: userData.balance,\n\t\t\taddress: userData.walletAddress,\n\t\t\trequester: userData.requester,\n\t\t};\n\t} catch (error) {\n\t\treturn error;\n\t}\n}\n\nexport async function UpdateWinner(user) {}\n"]},"metadata":{},"sourceType":"module"}