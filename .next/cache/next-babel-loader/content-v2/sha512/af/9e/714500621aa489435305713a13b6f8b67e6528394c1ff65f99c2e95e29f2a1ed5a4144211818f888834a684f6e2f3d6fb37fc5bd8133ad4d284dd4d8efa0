{"ast":null,"code":"import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport Adapters from \"next-auth/adapters\";\nimport { PrismaClient } from \"@prisma/client\";\nconst prisma = new PrismaClient();\n\nconst authHandler = (req, res) => NextAuth(req, res, options);\n\nexport default authHandler;\nconst options = {\n  providers: [Providers.Credentials({\n    id: \"credentials\",\n    name: \"Login\",\n\n    async authorize(credentials) {\n      const user = await prisma.users.findFirst({\n        where: {\n          email: credentials.email,\n          password: credentials.password\n        }\n      });\n\n      if (user !== null) {\n        userAccount = user;\n        return user;\n      } else {\n        return null;\n      }\n    }\n\n  }), Providers.Email({\n    server: {\n      host: process.env.SMTP_HOST,\n      port: Number(process.env.SMTP_PORT),\n      auth: {\n        user: process.env.SMTP_USER,\n        pass: process.env.SMTP_PASSWORD\n      }\n    },\n    from: process.env.SMTP_FROM\n  }), Providers.GitHub({\n    clientId: process.env.GITHUB_ID,\n    clientSecret: process.env.GITHUB_SECRET\n  })],\n  callbacks: {\n    async jwt(token, user) {\n      if (user) {\n        token.accessToken = user.data.token;\n      }\n\n      return token;\n    },\n\n    async session(session, token) {\n      session.accessToken = token.accessToken;\n      return session;\n    }\n\n  },\n  pages: {\n    signIn: \"/LoginRegister\",\n    newUser: \"/UserPage\"\n  },\n  // @ts-ignore\n  adapter: Adapters.Prisma.Adapter({\n    prisma\n  }),\n  secret: process.env.SECRET\n};","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","Adapters","PrismaClient","prisma","authHandler","req","res","options","providers","Credentials","id","name","authorize","credentials","user","users","findFirst","where","email","password","userAccount","Email","server","host","process","env","SMTP_HOST","port","Number","SMTP_PORT","auth","SMTP_USER","pass","SMTP_PASSWORD","from","SMTP_FROM","GitHub","clientId","GITHUB_ID","clientSecret","GITHUB_SECRET","callbacks","jwt","token","accessToken","data","session","pages","signIn","newUser","adapter","Prisma","Adapter","secret","SECRET"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,MAAMC,MAAM,GAAG,IAAID,YAAJ,EAAf;;AAEA,MAAME,WAAW,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAcP,QAAQ,CAACM,GAAD,EAAMC,GAAN,EAAWC,OAAX,CAA1C;;AACA,eAAeH,WAAf;AAEA,MAAMG,OAAO,GAAG;AACfC,EAAAA,SAAS,EAAE,CACVR,SAAS,CAACS,WAAV,CAAsB;AACrBC,IAAAA,EAAE,EAAE,aADiB;AAErBC,IAAAA,IAAI,EAAE,OAFe;;AAGrB,UAAMC,SAAN,CAAgBC,WAAhB,EAA6B;AAC5B,YAAMC,IAAI,GAAG,MAAMX,MAAM,CAACY,KAAP,CAAaC,SAAb,CAAuB;AACzCC,QAAAA,KAAK,EAAE;AACNC,UAAAA,KAAK,EAAEL,WAAW,CAACK,KADb;AAENC,UAAAA,QAAQ,EAAEN,WAAW,CAACM;AAFhB;AADkC,OAAvB,CAAnB;;AAOA,UAAIL,IAAI,KAAK,IAAb,EAAmB;AAClBM,QAAAA,WAAW,GAAGN,IAAd;AACA,eAAOA,IAAP;AACA,OAHD,MAGO;AACN,eAAO,IAAP;AACA;AACD;;AAjBoB,GAAtB,CADU,EAoBVd,SAAS,CAACqB,KAAV,CAAgB;AACfC,IAAAA,MAAM,EAAE;AACPC,MAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,SADX;AAEPC,MAAAA,IAAI,EAAEC,MAAM,CAACJ,OAAO,CAACC,GAAR,CAAYI,SAAb,CAFL;AAGPC,MAAAA,IAAI,EAAE;AACLhB,QAAAA,IAAI,EAAEU,OAAO,CAACC,GAAR,CAAYM,SADb;AAELC,QAAAA,IAAI,EAAER,OAAO,CAACC,GAAR,CAAYQ;AAFb;AAHC,KADO;AASfC,IAAAA,IAAI,EAAEV,OAAO,CAACC,GAAR,CAAYU;AATH,GAAhB,CApBU,EA+BVnC,SAAS,CAACoC,MAAV,CAAiB;AAChBC,IAAAA,QAAQ,EAAEb,OAAO,CAACC,GAAR,CAAYa,SADN;AAEhBC,IAAAA,YAAY,EAAEf,OAAO,CAACC,GAAR,CAAYe;AAFV,GAAjB,CA/BU,CADI;AAqCfC,EAAAA,SAAS,EAAE;AACV,UAAMC,GAAN,CAAUC,KAAV,EAAiB7B,IAAjB,EAAuB;AACtB,UAAIA,IAAJ,EAAU;AACT6B,QAAAA,KAAK,CAACC,WAAN,GAAoB9B,IAAI,CAAC+B,IAAL,CAAUF,KAA9B;AACA;;AACD,aAAOA,KAAP;AACA,KANS;;AAOV,UAAMG,OAAN,CAAcA,OAAd,EAAuBH,KAAvB,EAA8B;AAC7BG,MAAAA,OAAO,CAACF,WAAR,GAAsBD,KAAK,CAACC,WAA5B;AACA,aAAOE,OAAP;AACA;;AAVS,GArCI;AAiDfC,EAAAA,KAAK,EAAE;AACNC,IAAAA,MAAM,EAAE,gBADF;AAENC,IAAAA,OAAO,EAAE;AAFH,GAjDQ;AAqDf;AACAC,EAAAA,OAAO,EAAEjD,QAAQ,CAACkD,MAAT,CAAgBC,OAAhB,CAAwB;AAChCjD,IAAAA;AADgC,GAAxB,CAtDM;AA0DfkD,EAAAA,MAAM,EAAE7B,OAAO,CAACC,GAAR,CAAY6B;AA1DL,CAAhB","sourcesContent":["import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport Adapters from \"next-auth/adapters\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nconst authHandler = (req, res) => NextAuth(req, res, options);\nexport default authHandler;\n\nconst options = {\n\tproviders: [\n\t\tProviders.Credentials({\n\t\t\tid: \"credentials\",\n\t\t\tname: \"Login\",\n\t\t\tasync authorize(credentials) {\n\t\t\t\tconst user = await prisma.users.findFirst({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\temail: credentials.email,\n\t\t\t\t\t\tpassword: credentials.password,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tif (user !== null) {\n\t\t\t\t\tuserAccount = user;\n\t\t\t\t\treturn user;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\t\t}),\n\t\tProviders.Email({\n\t\t\tserver: {\n\t\t\t\thost: process.env.SMTP_HOST,\n\t\t\t\tport: Number(process.env.SMTP_PORT),\n\t\t\t\tauth: {\n\t\t\t\t\tuser: process.env.SMTP_USER,\n\t\t\t\t\tpass: process.env.SMTP_PASSWORD,\n\t\t\t\t},\n\t\t\t},\n\t\t\tfrom: process.env.SMTP_FROM,\n\t\t}),\n\t\tProviders.GitHub({\n\t\t\tclientId: process.env.GITHUB_ID,\n\t\t\tclientSecret: process.env.GITHUB_SECRET,\n\t\t}),\n\t],\n\tcallbacks: {\n\t\tasync jwt(token, user) {\n\t\t\tif (user) {\n\t\t\t\ttoken.accessToken = user.data.token;\n\t\t\t}\n\t\t\treturn token;\n\t\t},\n\t\tasync session(session, token) {\n\t\t\tsession.accessToken = token.accessToken;\n\t\t\treturn session;\n\t\t},\n\t},\n\tpages: {\n\t\tsignIn: \"/LoginRegister\",\n\t\tnewUser: \"/UserPage\",\n\t},\n\t// @ts-ignore\n\tadapter: Adapters.Prisma.Adapter({\n\t\tprisma,\n\t}),\n\n\tsecret: process.env.SECRET,\n};\n"]},"metadata":{},"sourceType":"module"}