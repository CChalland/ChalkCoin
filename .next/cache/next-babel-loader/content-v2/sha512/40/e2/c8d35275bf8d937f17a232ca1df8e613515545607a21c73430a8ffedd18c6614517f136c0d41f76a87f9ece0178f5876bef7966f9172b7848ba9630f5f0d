{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/test.js\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { Container, Col, Row, Button, Modal, Carousel, Tab, Nav, Card } from \"react-bootstrap\";\nimport Select from \"react-select\";\nimport prisma from \"../contexts/prisma\";\n\nfunction Test(props) {\n  const options = [\"Inside Out\", \"John Wick\", \"Jurassic World\", \"The Lord of the Rings\", \"Pacific Rim\", \"Pirates of the Caribbean\", \"Planet of the Apes\", \"Saw\", \"Sicario\", \"Zombies\"];\n  const {\n    0: results,\n    1: setResults\n  } = useState(options);\n  const {\n    0: dropdownVisible,\n    1: setDropdownVisible\n  } = useState(false);\n  const [singleSelect, setSingleSelect] = React.useState(\"\");\n\n  const filterMethod = (options, query) => {\n    return options.filter(option => option.toLowerCase().includes(query.toLowerCase()));\n  };\n\n  const searchList = event => {\n    const results = filterMethod(options, event.target.value);\n    setResults(results);\n  };\n\n  const showDropdown = () => {\n    setDropdownVisible(true);\n  };\n\n  const hideDropdown = () => {\n    setDropdownVisible(false);\n  };\n\n  console.log(props.users);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autocomplete\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type to search list\",\n        onChange: searchList,\n        onFocus: () => showDropdown(),\n        onBlur: () => hideDropdown()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }, this), dropdownVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"autocomplete-dropdown\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"autocomplete-search-results-list\",\n          children: results.map(result => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"autocomplete-search-result\",\n            children: result\n          }, result, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 9\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      className: \"react-select primary\",\n      classNamePrefix: \"react-select\",\n      name: \"singleSelect\",\n      value: singleSelect,\n      onChange: value => setSingleSelect(value),\n      options: [{\n        value: \"\",\n        label: \"Single Option\",\n        isDisabled: true\n      }, {\n        value: \"2\",\n        label: \"Foobar\"\n      }, {\n        value: \"3\",\n        label: \"Is great\"\n      }],\n      placeholder: \"Search Username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }, this);\n}\n\nexport default Test;\nexport async function getServerSideProps(context) {\n  let users = await prisma.user.findMany();\n  return {\n    props: {\n      users\n    }\n  };\n}","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/test.js"],"names":["React","useState","axios","Container","Col","Row","Button","Modal","Carousel","Tab","Nav","Card","Select","prisma","Test","props","options","results","setResults","dropdownVisible","setDropdownVisible","singleSelect","setSingleSelect","filterMethod","query","filter","option","toLowerCase","includes","searchList","event","target","value","showDropdown","hideDropdown","console","log","users","map","result","label","isDisabled","getServerSideProps","context","user","findMany"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { Container, Col, Row, Button, Modal, Carousel, Tab, Nav, Card } from \"react-bootstrap\";\nimport Select from \"react-select\";\nimport prisma from \"../contexts/prisma\";\n\nfunction Test(props) {\n\tconst options = [\n\t\t\"Inside Out\",\n\t\t\"John Wick\",\n\t\t\"Jurassic World\",\n\t\t\"The Lord of the Rings\",\n\t\t\"Pacific Rim\",\n\t\t\"Pirates of the Caribbean\",\n\t\t\"Planet of the Apes\",\n\t\t\"Saw\",\n\t\t\"Sicario\",\n\t\t\"Zombies\",\n\t];\n\n\tconst [results, setResults] = useState(options);\n\tconst [dropdownVisible, setDropdownVisible] = useState(false);\n\tconst [singleSelect, setSingleSelect] = React.useState(\"\");\n\n\tconst filterMethod = (options, query) => {\n\t\treturn options.filter((option) => option.toLowerCase().includes(query.toLowerCase()));\n\t};\n\n\tconst searchList = (event) => {\n\t\tconst results = filterMethod(options, event.target.value);\n\t\tsetResults(results);\n\t};\n\n\tconst showDropdown = () => {\n\t\tsetDropdownVisible(true);\n\t};\n\n\tconst hideDropdown = () => {\n\t\tsetDropdownVisible(false);\n\t};\n\n\tconsole.log(props.users);\n\treturn (\n\t\t<Container>\n\t\t\t<div className=\"autocomplete\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Type to search list\"\n\t\t\t\t\tonChange={searchList}\n\t\t\t\t\tonFocus={() => showDropdown()}\n\t\t\t\t\tonBlur={() => hideDropdown()}\n\t\t\t\t/>\n\t\t\t\t{dropdownVisible && (\n\t\t\t\t\t<div className=\"autocomplete-dropdown\">\n\t\t\t\t\t\t<ul className=\"autocomplete-search-results-list\">\n\t\t\t\t\t\t\t{results.map((result) => (\n\t\t\t\t\t\t\t\t<li className=\"autocomplete-search-result\" key={result}>\n\t\t\t\t\t\t\t\t\t{result}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<Select\n\t\t\t\tclassName=\"react-select primary\"\n\t\t\t\tclassNamePrefix=\"react-select\"\n\t\t\t\tname=\"singleSelect\"\n\t\t\t\tvalue={singleSelect}\n\t\t\t\tonChange={(value) => setSingleSelect(value)}\n\t\t\t\toptions={[\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: \"\",\n\t\t\t\t\t\tlabel: \"Single Option\",\n\t\t\t\t\t\tisDisabled: true,\n\t\t\t\t\t},\n\t\t\t\t\t{ value: \"2\", label: \"Foobar\" },\n\t\t\t\t\t{ value: \"3\", label: \"Is great\" },\n\t\t\t\t]}\n\t\t\t\tplaceholder=\"Search Username\"\n\t\t\t/>\n\t\t</Container>\n\t);\n}\n\nexport default Test;\n\nexport async function getServerSideProps(context) {\n\tlet users = await prisma.user.findMany();\n\n\treturn {\n\t\tprops: { users },\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}