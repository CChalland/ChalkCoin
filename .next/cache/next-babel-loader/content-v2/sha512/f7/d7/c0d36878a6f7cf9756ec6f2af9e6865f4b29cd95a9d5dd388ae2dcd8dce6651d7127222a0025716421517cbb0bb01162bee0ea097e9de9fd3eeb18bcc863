{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/bets.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Container, Row, Col, Card, Form, InputGroup } from \"react-bootstrap\";\nimport { SportContext } from \"../contexts/Sports.Context\";\nimport BetCard from \"../components/BetCard\";\nimport axios from \"axios\"; // async function fetchBetsJSON() {\n// \tconst res = await fetch(\"http://localhost:4000/api/bets\");\n// \tconst bets = await res.json();\n// \treturn bets;\n// }\n\nfunction Bets(props) {\n  _s();\n\n  var betsData = props.betsData,\n      currentUser = props.currentUser;\n\n  var _useContext = useContext(SportContext),\n      sportsData = _useContext.sportsData;\n\n  var _useState = useState(betsData),\n      bets = _useState[0],\n      setBets = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  var betsGames = betsData.map(function (bet) {\n    var _sport$data$events;\n\n    var sport = sportsData.find(function (sport) {\n      return sport.display_name === bet.details.displayName;\n    });\n    var event = (_sport$data$events = sport.data.events) === null || _sport$data$events === void 0 ? void 0 : _sport$data$events.find(function (event) {\n      return event.id === bet.details.id;\n    });\n    bet.event = event;\n    return bet;\n  }); // useEffect(() => {\n  // \tconst getData = async () => {\n  // \t\tfetchBetsJSON().then((bets) => {\n  // \t\t\tsetBets(bets);\n  // \t\t});\n  // \t};\n  // \tgetData();\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(Card.Header, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                children: \"BETS: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                  className: true ? \"has-success\" : \"has-error\",\n                  children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n                    children: [/*#__PURE__*/_jsxDEV(InputGroup.Prepend, {\n                      children: /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                        children: /*#__PURE__*/_jsxDEV(\"i\", {\n                          className: \"nc-icon nc-single-02\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 49,\n                          columnNumber: 14\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 48,\n                        columnNumber: 13\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 47,\n                      columnNumber: 12\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      xs: 9,\n                      lg: 9,\n                      className: \"mx-0 px-0\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 52,\n                      columnNumber: 12\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 46,\n                    columnNumber: 11\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    name: \"amount\",\n                    type: \"text\",\n                    value: amount,\n                    onChange: function onChange(e) {\n                      setAmount(e.target.value);\n\n                      if (minValue(e.target.value, 0)) {\n                        setAmountState(true);\n                      } else {\n                        setAmountState(false);\n                      }\n                    },\n                    placeholder: \"Amount\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 54,\n                    columnNumber: 11\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 10\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(BetCard, {\n      betsData: bets,\n      currentUser: currentUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Bets, \"GLKYiCI88pFyWgRo3gHS2j7Kpp0=\");\n\n_c = Bets;\nexport var __N_SSP = true;\nexport default Bets;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bets\");","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/bets.js"],"names":["React","useContext","useEffect","useState","Container","Row","Col","Card","Form","InputGroup","SportContext","BetCard","axios","Bets","props","betsData","currentUser","sportsData","bets","setBets","search","setSearch","betsGames","map","bet","sport","find","display_name","details","displayName","event","data","events","id","amount","e","setAmount","target","value","minValue","setAmountState"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { Container, Row, Col, Card, Form, InputGroup } from \"react-bootstrap\";\nimport { SportContext } from \"../contexts/Sports.Context\";\nimport { getSession } from \"next-auth/client\";\nimport BetCard from \"../components/BetCard\";\nimport axios from \"axios\";\n\n// async function fetchBetsJSON() {\n// \tconst res = await fetch(\"http://localhost:4000/api/bets\");\n// \tconst bets = await res.json();\n// \treturn bets;\n// }\n\nfunction Bets(props) {\n\tconst { betsData, currentUser } = props;\n\tconst { sportsData } = useContext(SportContext);\n\tconst [bets, setBets] = useState(betsData);\n\tconst [search, setSearch] = useState(\"\");\n\n\tconst betsGames = betsData.map((bet) => {\n\t\tconst sport = sportsData.find((sport) => sport.display_name === bet.details.displayName);\n\t\tconst event = sport.data.events?.find((event) => event.id === bet.details.id);\n\t\tbet.event = event;\n\t\treturn bet;\n\t});\n\n\t// useEffect(() => {\n\t// \tconst getData = async () => {\n\t// \t\tfetchBetsJSON().then((bets) => {\n\t// \t\t\tsetBets(bets);\n\t// \t\t});\n\t// \t};\n\t// \tgetData();\n\t// }, []);\n\n\treturn (\n\t\t<Container fluid>\n\t\t\t<Row>\n\t\t\t\t<Col>\n\t\t\t\t\t<Form>\n\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t\t\t<Col>{\"BETS: \"}</Col>\n\t\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t\t<Form.Group className={true ? \"has-success\" : \"has-error\"}>\n\t\t\t\t\t\t\t\t\t\t<InputGroup>\n\t\t\t\t\t\t\t\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t\t\t\t\t\t\t\t<InputGroup.Text>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"nc-icon nc-single-02\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t</InputGroup.Text>\n\t\t\t\t\t\t\t\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t\t\t\t\t\t\t\t<Col xs={9} lg={9} className=\"mx-0 px-0\"></Col>\n\t\t\t\t\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\t\t\tname=\"amount\"\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={amount}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetAmount(e.target.value);\n\t\t\t\t\t\t\t\t\t\t\t\tif (minValue(e.target.value, 0)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAmountState(true);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetAmountState(false);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Amount\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Card.Header>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Form>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<BetCard betsData={bets} currentUser={currentUser} />\n\t\t</Container>\n\t);\n}\n\nexport default Bets;\n\nexport async function getServerSideProps(context) {\n\tconst { req, res } = context;\n\tconst session = await getSession({ req });\n\tlet currentUser = {};\n\tif (session) {\n\t\tcurrentUser = await prisma.user.findUnique({\n\t\t\twhere: {\n\t\t\t\tid: session.user.id,\n\t\t\t},\n\t\t});\n\t\tdelete currentUser.password;\n\t\tdelete currentUser.paypal;\n\t\tdelete currentUser.emailVerified;\n\t\tdelete currentUser.createdAt;\n\t\tdelete currentUser.updatedAt;\n\t}\n\n\tlet bets = await prisma.bet.findMany({\n\t\twhere: {\n\t\t\taccepted: false,\n\t\t},\n\t});\n\tconst betPromises = bets.map(async (bet) => {\n\t\tbet.details = JSON.parse(bet.details);\n\t\tbet.createdAt = JSON.stringify(bet.createdAt);\n\t\tbet.updatedAt = JSON.stringify(bet.updatedAt);\n\t\treturn bet;\n\t});\n\tconst betsData = await Promise.all(betPromises);\n\n\treturn {\n\t\tprops: { currentUser, betsData },\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}