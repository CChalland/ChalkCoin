{"ast":null,"code":"import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport Adapters from \"next-auth/adapters\";\nimport prisma from \"../../../contexts/prisma\";\nimport { compareSync } from \"bcrypt\";\n\nconst authHandler = (req, res) => NextAuth(req, res, options);\n\nexport default authHandler;\nconst options = {\n  providers: [// CredentialsProvider({\n  // \t// The name to display on the sign in form (e.g. 'Sign in with...')\n  // \tname: \"Login\",\n  // \tasync authorize(credentials) {\n  // \t\tconst user = await prisma.user.findFirst({\n  // \t\t\twhere: {\n  // \t\t\t\temail: credentials.email,\n  // \t\t\t},\n  // \t\t\tinclude: {\n  // \t\t\t\trequester: true,\n  // \t\t\t\taccepter: true,\n  // \t\t\t\trecipient: true,\n  // \t\t\t},\n  // \t\t});\n  // \t\tconsole.log(\"credentials\", credentials);\n  // \t\tconsole.log(\"user\", user);\n  // \t\tif (user) {\n  // \t\t\tconst passwordTrue = await compareSync(credentials.password, user.password);\n  // \t\t\tif (passwordTrue) {\n  // \t\t\t\tdelete user.password;\n  // \t\t\t\treturn user;\n  // \t\t\t} else {\n  // \t\t\t\tthrow new Error(\"incorrectPassword\");\n  // \t\t\t}\n  // \t\t} else {\n  // \t\t\tthrow new Error(\"invalidEmail\");\n  // \t\t}\n  // \t},\n  // }),\n  Providers.Credentials({\n    id: \"credentials\",\n    name: \"Login\",\n\n    async authorize(credentials) {\n      const user = await prisma.user.findFirst({\n        where: {\n          email: credentials.email\n        },\n        include: {\n          requester: true,\n          accepter: true,\n          recipient: true\n        }\n      });\n      console.log(\"credentials\", credentials);\n      console.log(\"user\", user);\n\n      if (user) {\n        const passwordTrue = await compareSync(credentials.password, user.password);\n\n        if (passwordTrue) {\n          delete user.password;\n          return user;\n        } else {\n          throw new Error(\"incorrectPassword\");\n        }\n      } else {\n        throw new Error(\"invalidEmail\");\n      }\n    }\n\n  }), Providers.Email({\n    server: {\n      host: process.env.SMTP_HOST,\n      port: Number(process.env.SMTP_PORT),\n      auth: {\n        user: process.env.SMTP_USER,\n        pass: process.env.SMTP_PASSWORD\n      }\n    },\n    from: process.env.SMTP_FROM\n  }), Providers.GitHub({\n    clientId: process.env.GITHUB_ID,\n    clientSecret: process.env.GITHUB_SECRET\n  })],\n  session: {\n    // Use JSON Web Tokens for session instead of database sessions.\n    // This option can be used with or without a database for users/accounts.\n    // Note: `jwt` is automatically set to `true` if no database is specified.\n    jwt: true,\n    // Seconds - How long until an idle session expires and is no longer valid.\n    maxAge: 30 * 24 * 60 * 60,\n    // 30 days\n    // Seconds - Throttle how frequently to write to database to extend a session.\n    // Use it to limit write operations. Set to 0 to always update the database.\n    // Note: This option is ignored if using JSON Web Tokens\n    updateAge: 24 * 60 * 60 // 24 hours\n\n  },\n  callbacks: {\n    async jwt(token, user, account, profile, isNewUser) {\n      console.log(\"jwt token\", token);\n      console.log(\"jwt user\", user);\n      console.log(\"jwt account\", account);\n      console.log(\"jwt profile\", profile);\n      console.log(\"jwt isNewUser\", isNewUser); // Persist the OAuth access_token to the token right after signin\n\n      if (account) {\n        token.accessToken = account.access_token;\n      }\n\n      if (user) {\n        token.user = user;\n      }\n\n      return token;\n    },\n\n    async session(session, token, user) {\n      console.log(\"session session\", session);\n      console.log(\"session token\", token);\n      console.log(\"session user\", user); // Send properties to the client, like an access_token from a provider.\n\n      session.accessToken = token.accessToken;\n      session.user = token.user;\n      return session;\n    }\n\n  },\n  pages: {\n    signIn: \"/LoginRegister\",\n    error: \"/LoginRegister\",\n    verifyRequest: \"/LoginRegister?VerifyRequest=true\",\n    newUser: \"/NewUser\"\n  },\n  // @ts-ignore\n  adapter: Adapters.Prisma.Adapter({\n    prisma\n  }),\n  secret: process.env.SECRET\n};","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","CredentialsProvider","Adapters","prisma","compareSync","authHandler","req","res","options","providers","Credentials","id","name","authorize","credentials","user","findFirst","where","email","include","requester","accepter","recipient","console","log","passwordTrue","password","Error","Email","server","host","process","env","SMTP_HOST","port","Number","SMTP_PORT","auth","SMTP_USER","pass","SMTP_PASSWORD","from","SMTP_FROM","GitHub","clientId","GITHUB_ID","clientSecret","GITHUB_SECRET","session","jwt","maxAge","updateAge","callbacks","token","account","profile","isNewUser","accessToken","access_token","pages","signIn","error","verifyRequest","newUser","adapter","Prisma","Adapter","secret","SECRET"],"mappings":"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","sourcesContent":["import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport Adapters from \"next-auth/adapters\";\nimport prisma from \"../../../contexts/prisma\";\nimport { compareSync } from \"bcrypt\";\n\nconst authHandler = (req, res) => NextAuth(req, res, options);\nexport default authHandler;\n\nconst options = {\n\tproviders: [\n\t\t// CredentialsProvider({\n\t\t// \t// The name to display on the sign in form (e.g. 'Sign in with...')\n\t\t// \tname: \"Login\",\n\t\t// \tasync authorize(credentials) {\n\t\t// \t\tconst user = await prisma.user.findFirst({\n\t\t// \t\t\twhere: {\n\t\t// \t\t\t\temail: credentials.email,\n\t\t// \t\t\t},\n\t\t// \t\t\tinclude: {\n\t\t// \t\t\t\trequester: true,\n\t\t// \t\t\t\taccepter: true,\n\t\t// \t\t\t\trecipient: true,\n\t\t// \t\t\t},\n\t\t// \t\t});\n\t\t// \t\tconsole.log(\"credentials\", credentials);\n\t\t// \t\tconsole.log(\"user\", user);\n\t\t// \t\tif (user) {\n\t\t// \t\t\tconst passwordTrue = await compareSync(credentials.password, user.password);\n\t\t// \t\t\tif (passwordTrue) {\n\t\t// \t\t\t\tdelete user.password;\n\t\t// \t\t\t\treturn user;\n\t\t// \t\t\t} else {\n\t\t// \t\t\t\tthrow new Error(\"incorrectPassword\");\n\t\t// \t\t\t}\n\t\t// \t\t} else {\n\t\t// \t\t\tthrow new Error(\"invalidEmail\");\n\t\t// \t\t}\n\t\t// \t},\n\t\t// }),\n\t\tProviders.Credentials({\n\t\t\tid: \"credentials\",\n\t\t\tname: \"Login\",\n\t\t\tasync authorize(credentials) {\n\t\t\t\tconst user = await prisma.user.findFirst({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\temail: credentials.email,\n\t\t\t\t\t},\n\t\t\t\t\tinclude: {\n\t\t\t\t\t\trequester: true,\n\t\t\t\t\t\taccepter: true,\n\t\t\t\t\t\trecipient: true,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tconsole.log(\"credentials\", credentials);\n\t\t\t\tconsole.log(\"user\", user);\n\t\t\t\tif (user) {\n\t\t\t\t\tconst passwordTrue = await compareSync(credentials.password, user.password);\n\t\t\t\t\tif (passwordTrue) {\n\t\t\t\t\t\tdelete user.password;\n\t\t\t\t\t\treturn user;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(\"incorrectPassword\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"invalidEmail\");\n\t\t\t\t}\n\t\t\t},\n\t\t}),\n\t\tProviders.Email({\n\t\t\tserver: {\n\t\t\t\thost: process.env.SMTP_HOST,\n\t\t\t\tport: Number(process.env.SMTP_PORT),\n\t\t\t\tauth: {\n\t\t\t\t\tuser: process.env.SMTP_USER,\n\t\t\t\t\tpass: process.env.SMTP_PASSWORD,\n\t\t\t\t},\n\t\t\t},\n\t\t\tfrom: process.env.SMTP_FROM,\n\t\t}),\n\t\tProviders.GitHub({\n\t\t\tclientId: process.env.GITHUB_ID,\n\t\t\tclientSecret: process.env.GITHUB_SECRET,\n\t\t}),\n\t],\n\tsession: {\n\t\t// Use JSON Web Tokens for session instead of database sessions.\n\t\t// This option can be used with or without a database for users/accounts.\n\t\t// Note: `jwt` is automatically set to `true` if no database is specified.\n\t\tjwt: true,\n\n\t\t// Seconds - How long until an idle session expires and is no longer valid.\n\t\tmaxAge: 30 * 24 * 60 * 60, // 30 days\n\n\t\t// Seconds - Throttle how frequently to write to database to extend a session.\n\t\t// Use it to limit write operations. Set to 0 to always update the database.\n\t\t// Note: This option is ignored if using JSON Web Tokens\n\t\tupdateAge: 24 * 60 * 60, // 24 hours\n\t},\n\tcallbacks: {\n\t\tasync jwt(token, user, account, profile, isNewUser) {\n\t\t\tconsole.log(\"jwt token\", token);\n\t\t\tconsole.log(\"jwt user\", user);\n\t\t\tconsole.log(\"jwt account\", account);\n\t\t\tconsole.log(\"jwt profile\", profile);\n\t\t\tconsole.log(\"jwt isNewUser\", isNewUser);\n\t\t\t// Persist the OAuth access_token to the token right after signin\n\t\t\tif (account) {\n\t\t\t\ttoken.accessToken = account.access_token;\n\t\t\t}\n\t\t\tif (user) {\n\t\t\t\ttoken.user = user;\n\t\t\t}\n\t\t\treturn token;\n\t\t},\n\t\tasync session(session, token, user) {\n\t\t\tconsole.log(\"session session\", session);\n\t\t\tconsole.log(\"session token\", token);\n\t\t\tconsole.log(\"session user\", user);\n\t\t\t// Send properties to the client, like an access_token from a provider.\n\t\t\tsession.accessToken = token.accessToken;\n\t\t\tsession.user = token.user;\n\n\t\t\treturn session;\n\t\t},\n\t},\n\tpages: {\n\t\tsignIn: \"/LoginRegister\",\n\t\terror: \"/LoginRegister\",\n\t\tverifyRequest: \"/LoginRegister?VerifyRequest=true\",\n\t\tnewUser: \"/NewUser\",\n\t},\n\t// @ts-ignore\n\tadapter: Adapters.Prisma.Adapter({\n\t\tprisma,\n\t}),\n\n\tsecret: process.env.SECRET,\n};\n"]},"metadata":{},"sourceType":"module"}