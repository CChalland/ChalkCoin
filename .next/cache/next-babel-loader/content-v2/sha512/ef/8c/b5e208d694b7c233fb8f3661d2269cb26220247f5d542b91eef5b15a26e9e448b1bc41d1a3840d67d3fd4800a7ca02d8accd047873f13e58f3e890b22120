{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/bets.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { SportContext } from \"../contexts/Sports.Context\";\nimport { getSession } from \"next-auth/client\";\nimport axios from \"axios\";\n\nasync function fetchBetsJSON() {\n  const res = await fetch(\"http://localhost:4000/api/bets\");\n  const bets = await res.json();\n  return bets;\n}\n\nfunction Bets(props) {\n  const {\n    sportsData\n  } = useContext(SportContext);\n  const {\n    0: bets,\n    1: setBets\n  } = useState(props.betsData); // useEffect(() => {\n  // \tconst getData = async () => {\n  // \t\tfetchBetsJSON().then((bets) => {\n  // \t\t\tsetBets(bets);\n  // \t\t});\n  // \t};\n  // \tgetData();\n  // }, []);\n\n  const betsGames = bets.map(bet => {\n    var _sport$data$events;\n\n    const sport = sportsData.find(sport => sport.display_name === bet.details.displayName);\n    const event = (_sport$data$events = sport.data.events) === null || _sport$data$events === void 0 ? void 0 : _sport$data$events.find(event => event.id === bet.details.id);\n    return event;\n  });\n  console.log(\"api bets\", bets);\n  console.log(betsGames);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"BETS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n}\n\nexport default Bets;\nexport async function getServerSideProps(context) {\n  const {\n    req,\n    res\n  } = context;\n  const session = await getSession({\n    req\n  });\n  let currentUser = {};\n\n  if (session) {\n    currentUser = await prisma.user.findUnique({\n      where: {\n        id: session.user.id\n      }\n    });\n    delete currentUser.password;\n    delete currentUser.paypal;\n    delete currentUser.emailVerified;\n    delete currentUser.createdAt;\n    delete currentUser.updatedAt;\n  }\n\n  let bets = await prisma.bet.findMany({\n    where: {\n      accepted: false\n    }\n  });\n  const betPromises = bets.map(async bet => {\n    bet.details = JSON.parse(bet.details);\n    bet.createdAt = JSON.stringify(bet.createdAt);\n    bet.updatedAt = JSON.stringify(bet.updatedAt);\n    return bet;\n  });\n  const betsData = await Promise.all(betPromises);\n  return {\n    props: {\n      currentUser,\n      betsData\n    }\n  };\n}","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/bets.js"],"names":["React","useContext","useEffect","useState","Container","SportContext","getSession","axios","fetchBetsJSON","res","fetch","bets","json","Bets","props","sportsData","setBets","betsData","betsGames","map","bet","sport","find","display_name","details","displayName","event","data","events","id","console","log","getServerSideProps","context","req","session","currentUser","prisma","user","findUnique","where","password","paypal","emailVerified","createdAt","updatedAt","findMany","accepted","betPromises","JSON","parse","stringify","Promise","all"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { SportContext } from \"../contexts/Sports.Context\";\nimport { getSession } from \"next-auth/client\";\nimport axios from \"axios\";\n\nasync function fetchBetsJSON() {\n\tconst res = await fetch(\"http://localhost:4000/api/bets\");\n\tconst bets = await res.json();\n\treturn bets;\n}\n\nfunction Bets(props) {\n\tconst { sportsData } = useContext(SportContext);\n\tconst [bets, setBets] = useState(props.betsData);\n\n\t// useEffect(() => {\n\t// \tconst getData = async () => {\n\t// \t\tfetchBetsJSON().then((bets) => {\n\t// \t\t\tsetBets(bets);\n\t// \t\t});\n\t// \t};\n\t// \tgetData();\n\t// }, []);\n\n\tconst betsGames = bets.map((bet) => {\n\t\tconst sport = sportsData.find((sport) => sport.display_name === bet.details.displayName);\n\t\tconst event = sport.data.events?.find((event) => event.id === bet.details.id);\n\t\treturn event;\n\t});\n\n\tconsole.log(\"api bets\", bets);\n\tconsole.log(betsGames);\n\n\treturn (\n\t\t<Container>\n\t\t\t<div>BETS</div>\n\t\t</Container>\n\t);\n}\n\nexport default Bets;\n\nexport async function getServerSideProps(context) {\n\tconst { req, res } = context;\n\tconst session = await getSession({ req });\n\tlet currentUser = {};\n\tif (session) {\n\t\tcurrentUser = await prisma.user.findUnique({\n\t\t\twhere: {\n\t\t\t\tid: session.user.id,\n\t\t\t},\n\t\t});\n\t\tdelete currentUser.password;\n\t\tdelete currentUser.paypal;\n\t\tdelete currentUser.emailVerified;\n\t\tdelete currentUser.createdAt;\n\t\tdelete currentUser.updatedAt;\n\t}\n\n\tlet bets = await prisma.bet.findMany({\n\t\twhere: {\n\t\t\taccepted: false,\n\t\t},\n\t});\n\tconst betPromises = bets.map(async (bet) => {\n\t\tbet.details = JSON.parse(bet.details);\n\t\tbet.createdAt = JSON.stringify(bet.createdAt);\n\t\tbet.updatedAt = JSON.stringify(bet.updatedAt);\n\t\treturn bet;\n\t});\n\tconst betsData = await Promise.all(betPromises);\n\n\treturn {\n\t\tprops: { currentUser, betsData },\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}