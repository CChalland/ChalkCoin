{"ast":null,"code":"import prisma from \"../../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\nexport default (async (req, res) => {\n  const session = await getSession({\n    req\n  });\n\n  if (req.method !== \"GET\") {\n    return res.status(405).json({\n      message: \"Method not allowed\"\n    });\n  } else if (req.method === \"POST\") {\n    const bet = req.body;\n    console.log(\"in api\", bet);\n\n    if (session) {\n      try {\n        // const createdBet = await prisma.bet.create({\n        // \tdata: {\n        // \t\tamount: bet.amount,\n        // \t\tdetails: JSON.stringify(bet.details),\n        // \t\trequester: {\n        // \t\t\tid: session.user.id,\n        // \t\t},\n        // \t},\n        // });\n        // return res.json(createdBet);\n        return res.json(bet);\n      } catch (e) {\n        console.log(e);\n\n        if (e.code === \"P2002\") {\n          return res.json({\n            error: `There's already an account with that ${e.meta.target[0]}`\n          });\n        } // throw e;\n\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/api/createBet.js"],"names":["prisma","getSession","req","res","session","method","status","json","message","bet","body","console","log","e","code","error","meta","target"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAMC,OAAO,GAAG,MAAMH,UAAU,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAAhC;;AAEA,MAAIA,GAAG,CAACG,MAAJ,KAAe,KAAnB,EAA0B;AACzB,WAAOF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACA,GAFD,MAEO,IAAIN,GAAG,CAACG,MAAJ,KAAe,MAAnB,EAA2B;AACjC,UAAMI,GAAG,GAAGP,GAAG,CAACQ,IAAhB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,GAAtB;;AAEA,QAAIL,OAAJ,EAAa;AACZ,UAAI;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAOD,GAAG,CAACI,IAAJ,CAASE,GAAT,CAAP;AACA,OAZD,CAYE,OAAOI,CAAP,EAAU;AACXF,QAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;;AACA,YAAIA,CAAC,CAACC,IAAF,KAAW,OAAf,EAAwB;AACvB,iBAAOX,GAAG,CAACI,IAAJ,CAAS;AAAEQ,YAAAA,KAAK,EAAG,wCAAuCF,CAAC,CAACG,IAAF,CAAOC,MAAP,CAAc,CAAd,CAAiB;AAAlE,WAAT,CAAP;AACA,SAJU,CAKX;;AACA;AACD;AACD;AACD,CAhCD","sourcesContent":["import prisma from \"../../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\n\nexport default async (req, res) => {\n\tconst session = await getSession({ req });\n\n\tif (req.method !== \"GET\") {\n\t\treturn res.status(405).json({ message: \"Method not allowed\" });\n\t} else if (req.method === \"POST\") {\n\t\tconst bet = req.body;\n\n\t\tconsole.log(\"in api\", bet);\n\n\t\tif (session) {\n\t\t\ttry {\n\t\t\t\t// const createdBet = await prisma.bet.create({\n\t\t\t\t// \tdata: {\n\t\t\t\t// \t\tamount: bet.amount,\n\t\t\t\t// \t\tdetails: JSON.stringify(bet.details),\n\t\t\t\t// \t\trequester: {\n\t\t\t\t// \t\t\tid: session.user.id,\n\t\t\t\t// \t\t},\n\t\t\t\t// \t},\n\t\t\t\t// });\n\t\t\t\t// return res.json(createdBet);\n\t\t\t\treturn res.json(bet);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t\tif (e.code === \"P2002\") {\n\t\t\t\t\treturn res.json({ error: `There's already an account with that ${e.meta.target[0]}` });\n\t\t\t\t}\n\t\t\t\t// throw e;\n\t\t\t}\n\t\t}\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}