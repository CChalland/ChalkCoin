{"ast":null,"code":"import prisma from \"../../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\nimport axios from \"axios\";\n\nconst fetchData = async (sportKey) => await axios.get(`https://api.the-odds-api.com/v4/sports/${sportKey}/?regions=us&oddsFormat=american&apiKey=${process.env.ODDS_API_KEY}`).then(res => ({\n  error: false,\n  odds: res.data\n})).catch(() => ({\n  error: true,\n  odds: null\n}));\n\nexport default (async (req, res) => {\n  const session = await getSession({\n    req\n  });\n  const oddsSportKeys = [{\n    displayName: \"NCAA Football\",\n    key: \"americanfootball_ncaaf\"\n  }, {\n    displayName: \"NFL\",\n    key: \"americanfootball_nfl\"\n  }, {\n    displayName: \"MLB\",\n    key: \"baseball_mlb\"\n  }, {\n    displayName: \"NBA\",\n    key: \"basketball_nba\"\n  }, {\n    displayName: \"NCAA Men's Basketball\",\n    key: \"\"\n  }, {\n    displayName: \"NHL\",\n    key: \"icehockey_nhl\"\n  }, {\n    displayName: \"WNBA\",\n    key: \"\"\n  }];\n\n  if (req.method === \"GET\") {\n    return res.status(405).json({\n      message: \"Method not allowed\"\n    });\n  } else if (req.method === \"POST\") {\n    const bet = req.body;\n\n    if (session) {\n      const oddsKey = oddsSportKeys.find(sport => sport.displayName === bet.details.displayName);\n      const betOdds = await fetchData(oddsKey.key);\n      console.log(betOdds);\n      return res.json(betOdds); // try {\n      // \tlet betData = {\n      // \t\tamount: parseFloat(bet.amount),\n      // \t\tdetails: JSON.stringify(bet.details),\n      // \t\tcurrency: bet.currency,\n      // \t\trequester: {\n      // \t\t\tconnect: {\n      // \t\t\t\tid: session.user.id,\n      // \t\t\t},\n      // \t\t},\n      // \t};\n      // \tif (bet.recipientId) betData.recipient = { connect: { id: bet.recipientId } };\n      // \tconst createdBet = await prisma.bet.create({\n      // \t\tdata: betData,\n      // \t});\n      // \treturn res.json(createdBet);\n      // } catch (e) {\n      // \tconsole.log(e);\n      // \tif (e.code === \"P2002\") {\n      // \t\treturn res.json({ error: `There's already an account with that ${e.meta.target[0]}` });\n      // \t}\n      // \t// throw e;\n      // }\n    }\n  }\n});","map":{"version":3,"sources":["/Users/colechalland/Projects/CryptoCurrency/BEToken/pages/api/createBet.js"],"names":["prisma","getSession","axios","fetchData","sportKey","get","process","env","ODDS_API_KEY","then","res","error","odds","data","catch","req","session","oddsSportKeys","displayName","key","method","status","json","message","bet","body","oddsKey","find","sport","details","betOdds","console","log"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAS,GAAG,OAAOC,QAAP,KACjB,MAAMF,KAAK,CACTG,GADI,CAEH,0CAAyCD,QAAS,2CAA0CE,OAAO,CAACC,GAAR,CAAYC,YAAa,EAFlH,EAIJC,IAJI,CAIEC,GAAD,KAAU;AACfC,EAAAA,KAAK,EAAE,KADQ;AAEfC,EAAAA,IAAI,EAAEF,GAAG,CAACG;AAFK,CAAV,CAJD,EAQJC,KARI,CAQE,OAAO;AACbH,EAAAA,KAAK,EAAE,IADM;AAEbC,EAAAA,IAAI,EAAE;AAFO,CAAP,CARF,CADP;;AAcA,gBAAe,OAAOG,GAAP,EAAYL,GAAZ,KAAoB;AAClC,QAAMM,OAAO,GAAG,MAAMf,UAAU,CAAC;AAAEc,IAAAA;AAAF,GAAD,CAAhC;AACA,QAAME,aAAa,GAAG,CACrB;AAAEC,IAAAA,WAAW,EAAE,eAAf;AAAgCC,IAAAA,GAAG,EAAE;AAArC,GADqB,EAErB;AAAED,IAAAA,WAAW,EAAE,KAAf;AAAsBC,IAAAA,GAAG,EAAE;AAA3B,GAFqB,EAGrB;AAAED,IAAAA,WAAW,EAAE,KAAf;AAAsBC,IAAAA,GAAG,EAAE;AAA3B,GAHqB,EAIrB;AAAED,IAAAA,WAAW,EAAE,KAAf;AAAsBC,IAAAA,GAAG,EAAE;AAA3B,GAJqB,EAKrB;AAAED,IAAAA,WAAW,EAAE,uBAAf;AAAwCC,IAAAA,GAAG,EAAE;AAA7C,GALqB,EAMrB;AAAED,IAAAA,WAAW,EAAE,KAAf;AAAsBC,IAAAA,GAAG,EAAE;AAA3B,GANqB,EAOrB;AAAED,IAAAA,WAAW,EAAE,MAAf;AAAuBC,IAAAA,GAAG,EAAE;AAA5B,GAPqB,CAAtB;;AAUA,MAAIJ,GAAG,CAACK,MAAJ,KAAe,KAAnB,EAA0B;AACzB,WAAOV,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACA,GAFD,MAEO,IAAIR,GAAG,CAACK,MAAJ,KAAe,MAAnB,EAA2B;AACjC,UAAMI,GAAG,GAAGT,GAAG,CAACU,IAAhB;;AACA,QAAIT,OAAJ,EAAa;AACZ,YAAMU,OAAO,GAAGT,aAAa,CAACU,IAAd,CAAoBC,KAAD,IAAWA,KAAK,CAACV,WAAN,KAAsBM,GAAG,CAACK,OAAJ,CAAYX,WAAhE,CAAhB;AACA,YAAMY,OAAO,GAAG,MAAM3B,SAAS,CAACuB,OAAO,CAACP,GAAT,CAA/B;AAEAY,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,aAAOpB,GAAG,CAACY,IAAJ,CAASQ,OAAT,CAAP,CALY,CAMZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACD,CA/CD","sourcesContent":["import prisma from \"../../contexts/prisma\";\nimport { getSession } from \"next-auth/client\";\nimport axios from \"axios\";\n\nconst fetchData = async (sportKey) =>\n\tawait axios\n\t\t.get(\n\t\t\t`https://api.the-odds-api.com/v4/sports/${sportKey}/?regions=us&oddsFormat=american&apiKey=${process.env.ODDS_API_KEY}`\n\t\t)\n\t\t.then((res) => ({\n\t\t\terror: false,\n\t\t\todds: res.data,\n\t\t}))\n\t\t.catch(() => ({\n\t\t\terror: true,\n\t\t\todds: null,\n\t\t}));\n\nexport default async (req, res) => {\n\tconst session = await getSession({ req });\n\tconst oddsSportKeys = [\n\t\t{ displayName: \"NCAA Football\", key: \"americanfootball_ncaaf\" },\n\t\t{ displayName: \"NFL\", key: \"americanfootball_nfl\" },\n\t\t{ displayName: \"MLB\", key: \"baseball_mlb\" },\n\t\t{ displayName: \"NBA\", key: \"basketball_nba\" },\n\t\t{ displayName: \"NCAA Men's Basketball\", key: \"\" },\n\t\t{ displayName: \"NHL\", key: \"icehockey_nhl\" },\n\t\t{ displayName: \"WNBA\", key: \"\" },\n\t];\n\n\tif (req.method === \"GET\") {\n\t\treturn res.status(405).json({ message: \"Method not allowed\" });\n\t} else if (req.method === \"POST\") {\n\t\tconst bet = req.body;\n\t\tif (session) {\n\t\t\tconst oddsKey = oddsSportKeys.find((sport) => sport.displayName === bet.details.displayName);\n\t\t\tconst betOdds = await fetchData(oddsKey.key);\n\n\t\t\tconsole.log(betOdds);\n\t\t\treturn res.json(betOdds);\n\t\t\t// try {\n\t\t\t// \tlet betData = {\n\t\t\t// \t\tamount: parseFloat(bet.amount),\n\t\t\t// \t\tdetails: JSON.stringify(bet.details),\n\t\t\t// \t\tcurrency: bet.currency,\n\t\t\t// \t\trequester: {\n\t\t\t// \t\t\tconnect: {\n\t\t\t// \t\t\t\tid: session.user.id,\n\t\t\t// \t\t\t},\n\t\t\t// \t\t},\n\t\t\t// \t};\n\t\t\t// \tif (bet.recipientId) betData.recipient = { connect: { id: bet.recipientId } };\n\t\t\t// \tconst createdBet = await prisma.bet.create({\n\t\t\t// \t\tdata: betData,\n\t\t\t// \t});\n\t\t\t// \treturn res.json(createdBet);\n\t\t\t// } catch (e) {\n\t\t\t// \tconsole.log(e);\n\t\t\t// \tif (e.code === \"P2002\") {\n\t\t\t// \t\treturn res.json({ error: `There's already an account with that ${e.meta.target[0]}` });\n\t\t\t// \t}\n\t\t\t// \t// throw e;\n\t\t\t// }\n\t\t}\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}